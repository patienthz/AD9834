
AD9834.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035c0  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003798  08003798  00013798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037d8  080037d8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080037d8  080037d8  000137d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080037e0  080037e0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037e0  080037e0  000137e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080037e4  080037e4  000137e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080037e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000000c  080037f4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  080037f4  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c97a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bd4  00000000  00000000  0002c9b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  0002e590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002ef10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dc1  00000000  00000000  0002f7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c12b  00000000  00000000  000545a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e99ea  00000000  00000000  000606d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014a0be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026b4  00000000  00000000  0014a110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08003780 	.word	0x08003780

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08003780 	.word	0x08003780

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	; 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	; 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2uiz>:
 80007e4:	004a      	lsls	r2, r1, #1
 80007e6:	d211      	bcs.n	800080c <__aeabi_d2uiz+0x28>
 80007e8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ec:	d211      	bcs.n	8000812 <__aeabi_d2uiz+0x2e>
 80007ee:	d50d      	bpl.n	800080c <__aeabi_d2uiz+0x28>
 80007f0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007f4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007f8:	d40e      	bmi.n	8000818 <__aeabi_d2uiz+0x34>
 80007fa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000802:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000806:	fa23 f002 	lsr.w	r0, r3, r2
 800080a:	4770      	bx	lr
 800080c:	f04f 0000 	mov.w	r0, #0
 8000810:	4770      	bx	lr
 8000812:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000816:	d102      	bne.n	800081e <__aeabi_d2uiz+0x3a>
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	4770      	bx	lr
 800081e:	f04f 0000 	mov.w	r0, #0
 8000822:	4770      	bx	lr

08000824 <__aeabi_uldivmod>:
 8000824:	b953      	cbnz	r3, 800083c <__aeabi_uldivmod+0x18>
 8000826:	b94a      	cbnz	r2, 800083c <__aeabi_uldivmod+0x18>
 8000828:	2900      	cmp	r1, #0
 800082a:	bf08      	it	eq
 800082c:	2800      	cmpeq	r0, #0
 800082e:	bf1c      	itt	ne
 8000830:	f04f 31ff 	movne.w	r1, #4294967295
 8000834:	f04f 30ff 	movne.w	r0, #4294967295
 8000838:	f000 b974 	b.w	8000b24 <__aeabi_idiv0>
 800083c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000840:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000844:	f000 f806 	bl	8000854 <__udivmoddi4>
 8000848:	f8dd e004 	ldr.w	lr, [sp, #4]
 800084c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000850:	b004      	add	sp, #16
 8000852:	4770      	bx	lr

08000854 <__udivmoddi4>:
 8000854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000858:	9d08      	ldr	r5, [sp, #32]
 800085a:	4604      	mov	r4, r0
 800085c:	468e      	mov	lr, r1
 800085e:	2b00      	cmp	r3, #0
 8000860:	d14d      	bne.n	80008fe <__udivmoddi4+0xaa>
 8000862:	428a      	cmp	r2, r1
 8000864:	4694      	mov	ip, r2
 8000866:	d969      	bls.n	800093c <__udivmoddi4+0xe8>
 8000868:	fab2 f282 	clz	r2, r2
 800086c:	b152      	cbz	r2, 8000884 <__udivmoddi4+0x30>
 800086e:	fa01 f302 	lsl.w	r3, r1, r2
 8000872:	f1c2 0120 	rsb	r1, r2, #32
 8000876:	fa20 f101 	lsr.w	r1, r0, r1
 800087a:	fa0c fc02 	lsl.w	ip, ip, r2
 800087e:	ea41 0e03 	orr.w	lr, r1, r3
 8000882:	4094      	lsls	r4, r2
 8000884:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000888:	0c21      	lsrs	r1, r4, #16
 800088a:	fbbe f6f8 	udiv	r6, lr, r8
 800088e:	fa1f f78c 	uxth.w	r7, ip
 8000892:	fb08 e316 	mls	r3, r8, r6, lr
 8000896:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800089a:	fb06 f107 	mul.w	r1, r6, r7
 800089e:	4299      	cmp	r1, r3
 80008a0:	d90a      	bls.n	80008b8 <__udivmoddi4+0x64>
 80008a2:	eb1c 0303 	adds.w	r3, ip, r3
 80008a6:	f106 30ff 	add.w	r0, r6, #4294967295
 80008aa:	f080 811f 	bcs.w	8000aec <__udivmoddi4+0x298>
 80008ae:	4299      	cmp	r1, r3
 80008b0:	f240 811c 	bls.w	8000aec <__udivmoddi4+0x298>
 80008b4:	3e02      	subs	r6, #2
 80008b6:	4463      	add	r3, ip
 80008b8:	1a5b      	subs	r3, r3, r1
 80008ba:	b2a4      	uxth	r4, r4
 80008bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80008c0:	fb08 3310 	mls	r3, r8, r0, r3
 80008c4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80008c8:	fb00 f707 	mul.w	r7, r0, r7
 80008cc:	42a7      	cmp	r7, r4
 80008ce:	d90a      	bls.n	80008e6 <__udivmoddi4+0x92>
 80008d0:	eb1c 0404 	adds.w	r4, ip, r4
 80008d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008d8:	f080 810a 	bcs.w	8000af0 <__udivmoddi4+0x29c>
 80008dc:	42a7      	cmp	r7, r4
 80008de:	f240 8107 	bls.w	8000af0 <__udivmoddi4+0x29c>
 80008e2:	4464      	add	r4, ip
 80008e4:	3802      	subs	r0, #2
 80008e6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ea:	1be4      	subs	r4, r4, r7
 80008ec:	2600      	movs	r6, #0
 80008ee:	b11d      	cbz	r5, 80008f8 <__udivmoddi4+0xa4>
 80008f0:	40d4      	lsrs	r4, r2
 80008f2:	2300      	movs	r3, #0
 80008f4:	e9c5 4300 	strd	r4, r3, [r5]
 80008f8:	4631      	mov	r1, r6
 80008fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008fe:	428b      	cmp	r3, r1
 8000900:	d909      	bls.n	8000916 <__udivmoddi4+0xc2>
 8000902:	2d00      	cmp	r5, #0
 8000904:	f000 80ef 	beq.w	8000ae6 <__udivmoddi4+0x292>
 8000908:	2600      	movs	r6, #0
 800090a:	e9c5 0100 	strd	r0, r1, [r5]
 800090e:	4630      	mov	r0, r6
 8000910:	4631      	mov	r1, r6
 8000912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000916:	fab3 f683 	clz	r6, r3
 800091a:	2e00      	cmp	r6, #0
 800091c:	d14a      	bne.n	80009b4 <__udivmoddi4+0x160>
 800091e:	428b      	cmp	r3, r1
 8000920:	d302      	bcc.n	8000928 <__udivmoddi4+0xd4>
 8000922:	4282      	cmp	r2, r0
 8000924:	f200 80f9 	bhi.w	8000b1a <__udivmoddi4+0x2c6>
 8000928:	1a84      	subs	r4, r0, r2
 800092a:	eb61 0303 	sbc.w	r3, r1, r3
 800092e:	2001      	movs	r0, #1
 8000930:	469e      	mov	lr, r3
 8000932:	2d00      	cmp	r5, #0
 8000934:	d0e0      	beq.n	80008f8 <__udivmoddi4+0xa4>
 8000936:	e9c5 4e00 	strd	r4, lr, [r5]
 800093a:	e7dd      	b.n	80008f8 <__udivmoddi4+0xa4>
 800093c:	b902      	cbnz	r2, 8000940 <__udivmoddi4+0xec>
 800093e:	deff      	udf	#255	; 0xff
 8000940:	fab2 f282 	clz	r2, r2
 8000944:	2a00      	cmp	r2, #0
 8000946:	f040 8092 	bne.w	8000a6e <__udivmoddi4+0x21a>
 800094a:	eba1 010c 	sub.w	r1, r1, ip
 800094e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000952:	fa1f fe8c 	uxth.w	lr, ip
 8000956:	2601      	movs	r6, #1
 8000958:	0c20      	lsrs	r0, r4, #16
 800095a:	fbb1 f3f7 	udiv	r3, r1, r7
 800095e:	fb07 1113 	mls	r1, r7, r3, r1
 8000962:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000966:	fb0e f003 	mul.w	r0, lr, r3
 800096a:	4288      	cmp	r0, r1
 800096c:	d908      	bls.n	8000980 <__udivmoddi4+0x12c>
 800096e:	eb1c 0101 	adds.w	r1, ip, r1
 8000972:	f103 38ff 	add.w	r8, r3, #4294967295
 8000976:	d202      	bcs.n	800097e <__udivmoddi4+0x12a>
 8000978:	4288      	cmp	r0, r1
 800097a:	f200 80cb 	bhi.w	8000b14 <__udivmoddi4+0x2c0>
 800097e:	4643      	mov	r3, r8
 8000980:	1a09      	subs	r1, r1, r0
 8000982:	b2a4      	uxth	r4, r4
 8000984:	fbb1 f0f7 	udiv	r0, r1, r7
 8000988:	fb07 1110 	mls	r1, r7, r0, r1
 800098c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000990:	fb0e fe00 	mul.w	lr, lr, r0
 8000994:	45a6      	cmp	lr, r4
 8000996:	d908      	bls.n	80009aa <__udivmoddi4+0x156>
 8000998:	eb1c 0404 	adds.w	r4, ip, r4
 800099c:	f100 31ff 	add.w	r1, r0, #4294967295
 80009a0:	d202      	bcs.n	80009a8 <__udivmoddi4+0x154>
 80009a2:	45a6      	cmp	lr, r4
 80009a4:	f200 80bb 	bhi.w	8000b1e <__udivmoddi4+0x2ca>
 80009a8:	4608      	mov	r0, r1
 80009aa:	eba4 040e 	sub.w	r4, r4, lr
 80009ae:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009b2:	e79c      	b.n	80008ee <__udivmoddi4+0x9a>
 80009b4:	f1c6 0720 	rsb	r7, r6, #32
 80009b8:	40b3      	lsls	r3, r6
 80009ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80009be:	ea4c 0c03 	orr.w	ip, ip, r3
 80009c2:	fa20 f407 	lsr.w	r4, r0, r7
 80009c6:	fa01 f306 	lsl.w	r3, r1, r6
 80009ca:	431c      	orrs	r4, r3
 80009cc:	40f9      	lsrs	r1, r7
 80009ce:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009d2:	fa00 f306 	lsl.w	r3, r0, r6
 80009d6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009da:	0c20      	lsrs	r0, r4, #16
 80009dc:	fa1f fe8c 	uxth.w	lr, ip
 80009e0:	fb09 1118 	mls	r1, r9, r8, r1
 80009e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009e8:	fb08 f00e 	mul.w	r0, r8, lr
 80009ec:	4288      	cmp	r0, r1
 80009ee:	fa02 f206 	lsl.w	r2, r2, r6
 80009f2:	d90b      	bls.n	8000a0c <__udivmoddi4+0x1b8>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009fc:	f080 8088 	bcs.w	8000b10 <__udivmoddi4+0x2bc>
 8000a00:	4288      	cmp	r0, r1
 8000a02:	f240 8085 	bls.w	8000b10 <__udivmoddi4+0x2bc>
 8000a06:	f1a8 0802 	sub.w	r8, r8, #2
 8000a0a:	4461      	add	r1, ip
 8000a0c:	1a09      	subs	r1, r1, r0
 8000a0e:	b2a4      	uxth	r4, r4
 8000a10:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a14:	fb09 1110 	mls	r1, r9, r0, r1
 8000a18:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a1c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a20:	458e      	cmp	lr, r1
 8000a22:	d908      	bls.n	8000a36 <__udivmoddi4+0x1e2>
 8000a24:	eb1c 0101 	adds.w	r1, ip, r1
 8000a28:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a2c:	d26c      	bcs.n	8000b08 <__udivmoddi4+0x2b4>
 8000a2e:	458e      	cmp	lr, r1
 8000a30:	d96a      	bls.n	8000b08 <__udivmoddi4+0x2b4>
 8000a32:	3802      	subs	r0, #2
 8000a34:	4461      	add	r1, ip
 8000a36:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a3a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a3e:	eba1 010e 	sub.w	r1, r1, lr
 8000a42:	42a1      	cmp	r1, r4
 8000a44:	46c8      	mov	r8, r9
 8000a46:	46a6      	mov	lr, r4
 8000a48:	d356      	bcc.n	8000af8 <__udivmoddi4+0x2a4>
 8000a4a:	d053      	beq.n	8000af4 <__udivmoddi4+0x2a0>
 8000a4c:	b15d      	cbz	r5, 8000a66 <__udivmoddi4+0x212>
 8000a4e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a52:	eb61 010e 	sbc.w	r1, r1, lr
 8000a56:	fa01 f707 	lsl.w	r7, r1, r7
 8000a5a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a5e:	40f1      	lsrs	r1, r6
 8000a60:	431f      	orrs	r7, r3
 8000a62:	e9c5 7100 	strd	r7, r1, [r5]
 8000a66:	2600      	movs	r6, #0
 8000a68:	4631      	mov	r1, r6
 8000a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6e:	f1c2 0320 	rsb	r3, r2, #32
 8000a72:	40d8      	lsrs	r0, r3
 8000a74:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a78:	fa21 f303 	lsr.w	r3, r1, r3
 8000a7c:	4091      	lsls	r1, r2
 8000a7e:	4301      	orrs	r1, r0
 8000a80:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a84:	fa1f fe8c 	uxth.w	lr, ip
 8000a88:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a8c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a90:	0c0b      	lsrs	r3, r1, #16
 8000a92:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a96:	fb00 f60e 	mul.w	r6, r0, lr
 8000a9a:	429e      	cmp	r6, r3
 8000a9c:	fa04 f402 	lsl.w	r4, r4, r2
 8000aa0:	d908      	bls.n	8000ab4 <__udivmoddi4+0x260>
 8000aa2:	eb1c 0303 	adds.w	r3, ip, r3
 8000aa6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000aaa:	d22f      	bcs.n	8000b0c <__udivmoddi4+0x2b8>
 8000aac:	429e      	cmp	r6, r3
 8000aae:	d92d      	bls.n	8000b0c <__udivmoddi4+0x2b8>
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	4463      	add	r3, ip
 8000ab4:	1b9b      	subs	r3, r3, r6
 8000ab6:	b289      	uxth	r1, r1
 8000ab8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000abc:	fb07 3316 	mls	r3, r7, r6, r3
 8000ac0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ac4:	fb06 f30e 	mul.w	r3, r6, lr
 8000ac8:	428b      	cmp	r3, r1
 8000aca:	d908      	bls.n	8000ade <__udivmoddi4+0x28a>
 8000acc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ad0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ad4:	d216      	bcs.n	8000b04 <__udivmoddi4+0x2b0>
 8000ad6:	428b      	cmp	r3, r1
 8000ad8:	d914      	bls.n	8000b04 <__udivmoddi4+0x2b0>
 8000ada:	3e02      	subs	r6, #2
 8000adc:	4461      	add	r1, ip
 8000ade:	1ac9      	subs	r1, r1, r3
 8000ae0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ae4:	e738      	b.n	8000958 <__udivmoddi4+0x104>
 8000ae6:	462e      	mov	r6, r5
 8000ae8:	4628      	mov	r0, r5
 8000aea:	e705      	b.n	80008f8 <__udivmoddi4+0xa4>
 8000aec:	4606      	mov	r6, r0
 8000aee:	e6e3      	b.n	80008b8 <__udivmoddi4+0x64>
 8000af0:	4618      	mov	r0, r3
 8000af2:	e6f8      	b.n	80008e6 <__udivmoddi4+0x92>
 8000af4:	454b      	cmp	r3, r9
 8000af6:	d2a9      	bcs.n	8000a4c <__udivmoddi4+0x1f8>
 8000af8:	ebb9 0802 	subs.w	r8, r9, r2
 8000afc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b00:	3801      	subs	r0, #1
 8000b02:	e7a3      	b.n	8000a4c <__udivmoddi4+0x1f8>
 8000b04:	4646      	mov	r6, r8
 8000b06:	e7ea      	b.n	8000ade <__udivmoddi4+0x28a>
 8000b08:	4620      	mov	r0, r4
 8000b0a:	e794      	b.n	8000a36 <__udivmoddi4+0x1e2>
 8000b0c:	4640      	mov	r0, r8
 8000b0e:	e7d1      	b.n	8000ab4 <__udivmoddi4+0x260>
 8000b10:	46d0      	mov	r8, sl
 8000b12:	e77b      	b.n	8000a0c <__udivmoddi4+0x1b8>
 8000b14:	3b02      	subs	r3, #2
 8000b16:	4461      	add	r1, ip
 8000b18:	e732      	b.n	8000980 <__udivmoddi4+0x12c>
 8000b1a:	4630      	mov	r0, r6
 8000b1c:	e709      	b.n	8000932 <__udivmoddi4+0xde>
 8000b1e:	4464      	add	r4, ip
 8000b20:	3802      	subs	r0, #2
 8000b22:	e742      	b.n	80009aa <__udivmoddi4+0x156>

08000b24 <__aeabi_idiv0>:
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <AD9834_Write_16Bits>:
返回值  : 无

*****************************************************************/

void AD9834_Write_16Bits(uint16_t data)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	80fb      	strh	r3, [r7, #6]
	uint8_t i = 0 ;
 8000b32:	2300      	movs	r3, #0
 8000b34:	73fb      	strb	r3, [r7, #15]

    AD9834_SCLK_SET ;
 8000b36:	2201      	movs	r2, #1
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b3e:	f000 ff7d 	bl	8001a3c <HAL_GPIO_WritePin>
    AD9834_FSYNC_CLR ;
 8000b42:	2200      	movs	r2, #0
 8000b44:	2140      	movs	r1, #64	; 0x40
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 ff77 	bl	8001a3c <HAL_GPIO_WritePin>

    for(i=0 ;i<16 ;i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]
 8000b52:	e024      	b.n	8000b9e <AD9834_Write_16Bits+0x76>
		{
        if(data & 0x8000)
 8000b54:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	da07      	bge.n	8000b6c <AD9834_Write_16Bits+0x44>
          AD9834_SDATA_SET ;
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b66:	f000 ff69 	bl	8001a3c <HAL_GPIO_WritePin>
 8000b6a:	e006      	b.n	8000b7a <AD9834_Write_16Bits+0x52>
        else
          AD9834_SDATA_CLR ;
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 ff61 	bl	8001a3c <HAL_GPIO_WritePin>

        AD9834_SCLK_CLR ;
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	2180      	movs	r1, #128	; 0x80
 8000b7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b82:	f000 ff5b 	bl	8001a3c <HAL_GPIO_WritePin>
        data <<= 1 ;
 8000b86:	88fb      	ldrh	r3, [r7, #6]
 8000b88:	005b      	lsls	r3, r3, #1
 8000b8a:	80fb      	strh	r3, [r7, #6]
        AD9834_SCLK_SET ;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2180      	movs	r1, #128	; 0x80
 8000b90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b94:	f000 ff52 	bl	8001a3c <HAL_GPIO_WritePin>
    for(i=0 ;i<16 ;i++)
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	73fb      	strb	r3, [r7, #15]
 8000b9e:	7bfb      	ldrb	r3, [r7, #15]
 8000ba0:	2b0f      	cmp	r3, #15
 8000ba2:	d9d7      	bls.n	8000b54 <AD9834_Write_16Bits+0x2c>
    }
    AD9834_SDATA_SET ;
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000baa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bae:	f000 ff45 	bl	8001a3c <HAL_GPIO_WritePin>
    AD9834_FSYNC_SET ;
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	2140      	movs	r1, #64	; 0x40
 8000bb6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bba:	f000 ff3f 	bl	8001a3c <HAL_GPIO_WritePin>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <AD9834_Select_Wave>:
返回值  ：无

************************************************************************************/
void AD9834_Select_Wave(uint16_t initdata)

{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	4603      	mov	r3, r0
 8000bce:	80fb      	strh	r3, [r7, #6]

    AD9834_FSYNC_SET;
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2140      	movs	r1, #64	; 0x40
 8000bd4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd8:	f000 ff30 	bl	8001a3c <HAL_GPIO_WritePin>

    AD9834_SCLK_SET;
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2180      	movs	r1, #128	; 0x80
 8000be0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be4:	f000 ff2a 	bl	8001a3c <HAL_GPIO_WritePin>

    AD9834_RESET_SET;
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf2:	f000 ff23 	bl	8001a3c <HAL_GPIO_WritePin>

    AD9834_RESET_SET;
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c00:	f000 ff1c 	bl	8001a3c <HAL_GPIO_WritePin>

    AD9834_RESET_CLR;
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f000 ff15 	bl	8001a3c <HAL_GPIO_WritePin>

    AD9834_Write_16Bits(initdata);
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4618      	mov	r0, r3
 8000c16:	f7ff ff87 	bl	8000b28 <AD9834_Write_16Bits>

}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <AD9834_Init>:
*****************************************************************/
// B6 FS  B5 PS    B7 FSY   B8 SCK   B9 SDA B10 RST

void AD9834_Init()

{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_6,RESET);//AD9834_FS
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	480d      	ldr	r0, [pc, #52]	; (8000c64 <AD9834_Init+0x40>)
 8000c2e:	f000 ff05 	bl	8001a3c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_12,RESET);//AD9834_PS
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c38:	480a      	ldr	r0, [pc, #40]	; (8000c64 <AD9834_Init+0x40>)
 8000c3a:	f000 feff 	bl	8001a3c <HAL_GPIO_WritePin>

	AD9834_Write_16Bits(0x2100);
 8000c3e:	f44f 5004 	mov.w	r0, #8448	; 0x2100
 8000c42:	f7ff ff71 	bl	8000b28 <AD9834_Write_16Bits>
	AD9834_Write_16Bits(0x2038);
 8000c46:	f242 0038 	movw	r0, #8248	; 0x2038
 8000c4a:	f7ff ff6d 	bl	8000b28 <AD9834_Write_16Bits>
	AD9834_Write_16Bits(0XC000);
 8000c4e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000c52:	f7ff ff69 	bl	8000b28 <AD9834_Write_16Bits>
	AD9834_Write_16Bits(0x2100);
 8000c56:	f44f 5004 	mov.w	r0, #8448	; 0x2100
 8000c5a:	f7ff ff65 	bl	8000b28 <AD9834_Write_16Bits>
}
 8000c5e:	bf00      	nop
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	48000400 	.word	0x48000400

08000c68 <AD9834_Set_Freq>:

返回值  : 无

*****************************************************************/
void AD9834_Set_Freq(uint8_t freq_number, uint32_t freq)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
    uint32_t FREQREG = (uint32_t)(268435456.0/AD9834_SYSTEM_COLCK*freq);
 8000c74:	6838      	ldr	r0, [r7, #0]
 8000c76:	f7ff fd3b 	bl	80006f0 <__aeabi_ui2d>
 8000c7a:	a323      	add	r3, pc, #140	; (adr r3, 8000d08 <AD9834_Set_Freq+0xa0>)
 8000c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c80:	f7ff faca 	bl	8000218 <__aeabi_dmul>
 8000c84:	4602      	mov	r2, r0
 8000c86:	460b      	mov	r3, r1
 8000c88:	4610      	mov	r0, r2
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f7ff fdaa 	bl	80007e4 <__aeabi_d2uiz>
 8000c90:	4603      	mov	r3, r0
 8000c92:	60bb      	str	r3, [r7, #8]
    uint16_t FREQREG_LSB_14BIT = (uint16_t)FREQREG;
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	81fb      	strh	r3, [r7, #14]
    uint16_t FREQREG_MSB_14BIT = (uint16_t)(FREQREG>>14);
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	0b9b      	lsrs	r3, r3, #14
 8000c9c:	81bb      	strh	r3, [r7, #12]

    if(freq_number == FREQ_0)
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d110      	bne.n	8000cc6 <AD9834_Set_Freq+0x5e>
    {
        FREQREG_LSB_14BIT &= ~(1U<<15);
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000caa:	81fb      	strh	r3, [r7, #14]
        FREQREG_LSB_14BIT |= 1<<14;
 8000cac:	89fb      	ldrh	r3, [r7, #14]
 8000cae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb2:	81fb      	strh	r3, [r7, #14]
        FREQREG_MSB_14BIT &= ~(1U<<15);
 8000cb4:	89bb      	ldrh	r3, [r7, #12]
 8000cb6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000cba:	81bb      	strh	r3, [r7, #12]
        FREQREG_MSB_14BIT |= 1<<14;
 8000cbc:	89bb      	ldrh	r3, [r7, #12]
 8000cbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cc2:	81bb      	strh	r3, [r7, #12]
 8000cc4:	e013      	b.n	8000cee <AD9834_Set_Freq+0x86>
    }
    else
    {
        FREQREG_LSB_14BIT &= ~(1<<14);
 8000cc6:	89fb      	ldrh	r3, [r7, #14]
 8000cc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ccc:	81fb      	strh	r3, [r7, #14]
        FREQREG_LSB_14BIT |= 1U<<15;
 8000cce:	89fb      	ldrh	r3, [r7, #14]
 8000cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000cd8:	81fb      	strh	r3, [r7, #14]
        FREQREG_MSB_14BIT &= ~(1<<14);
 8000cda:	89bb      	ldrh	r3, [r7, #12]
 8000cdc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ce0:	81bb      	strh	r3, [r7, #12]
        FREQREG_MSB_14BIT |= 1U<<15;
 8000ce2:	89bb      	ldrh	r3, [r7, #12]
 8000ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8000ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8000cec:	81bb      	strh	r3, [r7, #12]
    }
    AD9834_Write_16Bits(FREQREG_LSB_14BIT);
 8000cee:	89fb      	ldrh	r3, [r7, #14]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff19 	bl	8000b28 <AD9834_Write_16Bits>
    AD9834_Write_16Bits(FREQREG_MSB_14BIT);
 8000cf6:	89bb      	ldrh	r3, [r7, #12]
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f7ff ff15 	bl	8000b28 <AD9834_Write_16Bits>
}
 8000cfe:	bf00      	nop
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	d840baf8 	.word	0xd840baf8
 8000d0c:	400ca213 	.word	0x400ca213

08000d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d14:	f000 fb6d 	bl	80013f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d18:	f000 f832 	bl	8000d80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d1c:	f000 f95e 	bl	8000fdc <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000d20:	f000 f87a 	bl	8000e18 <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 8000d24:	f000 f8c2 	bl	8000eac <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000d28:	f000 f90c 	bl	8000f44 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  AD9834_Init();
 8000d2c:	f7ff ff7a 	bl	8000c24 <AD9834_Init>
  AD9834_Select_Wave(Square_Wave);//Sine_Wave  Square_Wave  Triangle_Wave
 8000d30:	f242 0028 	movw	r0, #8232	; 0x2028
 8000d34:	f7ff ff47 	bl	8000bc6 <AD9834_Select_Wave>
  AD9834_Set_Freq(FREQ_0, 1000);
 8000d38:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d3c:	2000      	movs	r0, #0
 8000d3e:	f7ff ff93 	bl	8000c68 <AD9834_Set_Freq>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  for(i=100000;i<=30000000;i+=50)
 8000d42:	4b0c      	ldr	r3, [pc, #48]	; (8000d74 <main+0x64>)
 8000d44:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <main+0x68>)
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	e00d      	b.n	8000d66 <main+0x56>
	  {
		  AD9834_Set_Freq(FREQ_0, i);
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	; (8000d74 <main+0x64>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	2000      	movs	r0, #0
 8000d52:	f7ff ff89 	bl	8000c68 <AD9834_Set_Freq>
		  HAL_Delay(10);
 8000d56:	200a      	movs	r0, #10
 8000d58:	f000 fbbc 	bl	80014d4 <HAL_Delay>
	  for(i=100000;i<=30000000;i+=50)
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <main+0x64>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	3332      	adds	r3, #50	; 0x32
 8000d62:	4a04      	ldr	r2, [pc, #16]	; (8000d74 <main+0x64>)
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	4b03      	ldr	r3, [pc, #12]	; (8000d74 <main+0x64>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <main+0x6c>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d9ec      	bls.n	8000d4a <main+0x3a>
 8000d70:	e7e7      	b.n	8000d42 <main+0x32>
 8000d72:	bf00      	nop
 8000d74:	20000028 	.word	0x20000028
 8000d78:	000186a0 	.word	0x000186a0
 8000d7c:	01c9c380 	.word	0x01c9c380

08000d80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b094      	sub	sp, #80	; 0x50
 8000d84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d86:	f107 0318 	add.w	r3, r7, #24
 8000d8a:	2238      	movs	r2, #56	; 0x38
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f002 fcee 	bl	8003770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000da2:	2000      	movs	r0, #0
 8000da4:	f000 fe86 	bl	8001ab4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000db0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000db2:	2340      	movs	r3, #64	; 0x40
 8000db4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000db6:	2302      	movs	r3, #2
 8000db8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dba:	2302      	movs	r3, #2
 8000dbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000dc2:	2355      	movs	r3, #85	; 0x55
 8000dc4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dd2:	f107 0318 	add.w	r3, r7, #24
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f000 ff20 	bl	8001c1c <HAL_RCC_OscConfig>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000de2:	f000 f991 	bl	8001108 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000de6:	230f      	movs	r3, #15
 8000de8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dea:	2303      	movs	r3, #3
 8000dec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000dfa:	1d3b      	adds	r3, r7, #4
 8000dfc:	2104      	movs	r1, #4
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fa24 	bl	800224c <HAL_RCC_ClockConfig>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e0a:	f000 f97d 	bl	8001108 <Error_Handler>
  }
}
 8000e0e:	bf00      	nop
 8000e10:	3750      	adds	r7, #80	; 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
	...

08000e18 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000e1c:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e1e:	4a22      	ldr	r2, [pc, #136]	; (8000ea8 <MX_LPUART1_UART_Init+0x90>)
 8000e20:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e28:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e2a:	4b1e      	ldr	r3, [pc, #120]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000e30:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000e36:	4b1b      	ldr	r3, [pc, #108]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000e3c:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e3e:	220c      	movs	r2, #12
 8000e40:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000e4e:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000e5a:	4812      	ldr	r0, [pc, #72]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e5c:	f001 fe60 	bl	8002b20 <HAL_UART_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e66:	f000 f94f 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e6e:	f002 fb91 	bl	8003594 <HAL_UARTEx_SetTxFifoThreshold>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8000e78:	f000 f946 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4809      	ldr	r0, [pc, #36]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e80:	f002 fbc6 	bl	8003610 <HAL_UARTEx_SetRxFifoThreshold>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d001      	beq.n	8000e8e <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8000e8a:	f000 f93d 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000e8e:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_LPUART1_UART_Init+0x8c>)
 8000e90:	f002 fb47 	bl	8003522 <HAL_UARTEx_DisableFifoMode>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8000e9a:	f000 f935 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	2000002c 	.word	0x2000002c
 8000ea8:	40008000 	.word	0x40008000

08000eac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000eb0:	4b22      	ldr	r3, [pc, #136]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000eb2:	4a23      	ldr	r2, [pc, #140]	; (8000f40 <MX_USART1_UART_Init+0x94>)
 8000eb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000eb6:	4b21      	ldr	r3, [pc, #132]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000eb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ebc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ebe:	4b1f      	ldr	r3, [pc, #124]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000eca:	4b1c      	ldr	r3, [pc, #112]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ed0:	4b1a      	ldr	r3, [pc, #104]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ed6:	4b19      	ldr	r3, [pc, #100]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000edc:	4b17      	ldr	r3, [pc, #92]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ee2:	4b16      	ldr	r3, [pc, #88]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ee8:	4b14      	ldr	r3, [pc, #80]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eee:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ef4:	4811      	ldr	r0, [pc, #68]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000ef6:	f001 fe13 	bl	8002b20 <HAL_UART_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000f00:	f000 f902 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f04:	2100      	movs	r1, #0
 8000f06:	480d      	ldr	r0, [pc, #52]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000f08:	f002 fb44 	bl	8003594 <HAL_UARTEx_SetTxFifoThreshold>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000f12:	f000 f8f9 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f16:	2100      	movs	r1, #0
 8000f18:	4808      	ldr	r0, [pc, #32]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000f1a:	f002 fb79 	bl	8003610 <HAL_UARTEx_SetRxFifoThreshold>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000f24:	f000 f8f0 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_USART1_UART_Init+0x90>)
 8000f2a:	f002 fafa 	bl	8003522 <HAL_UARTEx_DisableFifoMode>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000f34:	f000 f8e8 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	200000bc 	.word	0x200000bc
 8000f40:	40013800 	.word	0x40013800

08000f44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_USART3_UART_Init+0x94>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f4e:	4b21      	ldr	r3, [pc, #132]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b1d      	ldr	r3, [pc, #116]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b19      	ldr	r3, [pc, #100]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b17      	ldr	r3, [pc, #92]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b16      	ldr	r3, [pc, #88]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f8c:	4811      	ldr	r0, [pc, #68]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000f8e:	f001 fdc7 	bl	8002b20 <HAL_UART_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f98:	f000 f8b6 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	480d      	ldr	r0, [pc, #52]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fa0:	f002 faf8 	bl	8003594 <HAL_UARTEx_SetTxFifoThreshold>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000faa:	f000 f8ad 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4808      	ldr	r0, [pc, #32]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fb2:	f002 fb2d 	bl	8003610 <HAL_UARTEx_SetRxFifoThreshold>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fbc:	f000 f8a4 	bl	8001108 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fc0:	4804      	ldr	r0, [pc, #16]	; (8000fd4 <MX_USART3_UART_Init+0x90>)
 8000fc2:	f002 faae 	bl	8003522 <HAL_UARTEx_DisableFifoMode>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fcc:	f000 f89c 	bl	8001108 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fd0:	bf00      	nop
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	2000014c 	.word	0x2000014c
 8000fd8:	40004800 	.word	0x40004800

08000fdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	; 0x28
 8000fe0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe2:	f107 0314 	add.w	r3, r7, #20
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
 8000fee:	60da      	str	r2, [r3, #12]
 8000ff0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff2:	4b42      	ldr	r3, [pc, #264]	; (80010fc <MX_GPIO_Init+0x120>)
 8000ff4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff6:	4a41      	ldr	r2, [pc, #260]	; (80010fc <MX_GPIO_Init+0x120>)
 8000ff8:	f043 0304 	orr.w	r3, r3, #4
 8000ffc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ffe:	4b3f      	ldr	r3, [pc, #252]	; (80010fc <MX_GPIO_Init+0x120>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	f003 0304 	and.w	r3, r3, #4
 8001006:	613b      	str	r3, [r7, #16]
 8001008:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800100a:	4b3c      	ldr	r3, [pc, #240]	; (80010fc <MX_GPIO_Init+0x120>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	4a3b      	ldr	r2, [pc, #236]	; (80010fc <MX_GPIO_Init+0x120>)
 8001010:	f043 0320 	orr.w	r3, r3, #32
 8001014:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001016:	4b39      	ldr	r3, [pc, #228]	; (80010fc <MX_GPIO_Init+0x120>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	f003 0320 	and.w	r3, r3, #32
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001022:	4b36      	ldr	r3, [pc, #216]	; (80010fc <MX_GPIO_Init+0x120>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	4a35      	ldr	r2, [pc, #212]	; (80010fc <MX_GPIO_Init+0x120>)
 8001028:	f043 0301 	orr.w	r3, r3, #1
 800102c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800102e:	4b33      	ldr	r3, [pc, #204]	; (80010fc <MX_GPIO_Init+0x120>)
 8001030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001032:	f003 0301 	and.w	r3, r3, #1
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	4b30      	ldr	r3, [pc, #192]	; (80010fc <MX_GPIO_Init+0x120>)
 800103c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103e:	4a2f      	ldr	r2, [pc, #188]	; (80010fc <MX_GPIO_Init+0x120>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001046:	4b2d      	ldr	r3, [pc, #180]	; (80010fc <MX_GPIO_Init+0x120>)
 8001048:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|AD9834_FSYNC_Pin|AD9834_SCLK_Pin|AD9834_SDATA_Pin
 8001052:	2200      	movs	r2, #0
 8001054:	f44f 51c7 	mov.w	r1, #6368	; 0x18e0
 8001058:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800105c:	f000 fcee 	bl	8001a3c <HAL_GPIO_WritePin>
                          |AD9834_RESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, AD9834_PS_Pin|AD9834_FS_Pin, GPIO_PIN_RESET);
 8001060:	2200      	movs	r2, #0
 8001062:	f44f 5182 	mov.w	r1, #4160	; 0x1040
 8001066:	4826      	ldr	r0, [pc, #152]	; (8001100 <MX_GPIO_Init+0x124>)
 8001068:	f000 fce8 	bl	8001a3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800106c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001072:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001076:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800107c:	f107 0314 	add.w	r3, r7, #20
 8001080:	4619      	mov	r1, r3
 8001082:	4820      	ldr	r0, [pc, #128]	; (8001104 <MX_GPIO_Init+0x128>)
 8001084:	f000 fb58 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001088:	2320      	movs	r3, #32
 800108a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108c:	2301      	movs	r3, #1
 800108e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001094:	2300      	movs	r3, #0
 8001096:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001098:	f107 0314 	add.w	r3, r7, #20
 800109c:	4619      	mov	r1, r3
 800109e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a2:	f000 fb49 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9834_FSYNC_Pin AD9834_SCLK_Pin AD9834_SDATA_Pin AD9834_RESET_Pin */
  GPIO_InitStruct.Pin = AD9834_FSYNC_Pin|AD9834_SCLK_Pin|AD9834_SDATA_Pin|AD9834_RESET_Pin;
 80010a6:	f44f 53c6 	mov.w	r3, #6336	; 0x18c0
 80010aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ac:	2301      	movs	r3, #1
 80010ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010b4:	2303      	movs	r3, #3
 80010b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f000 fb39 	bl	8001738 <HAL_GPIO_Init>

  /*Configure GPIO pins : AD9834_PS_Pin AD9834_FS_Pin */
  GPIO_InitStruct.Pin = AD9834_PS_Pin|AD9834_FS_Pin;
 80010c6:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 80010ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010cc:	2301      	movs	r3, #1
 80010ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <MX_GPIO_Init+0x124>)
 80010e0:	f000 fb2a 	bl	8001738 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2028      	movs	r0, #40	; 0x28
 80010ea:	f000 faf0 	bl	80016ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010ee:	2028      	movs	r0, #40	; 0x28
 80010f0:	f000 fb07 	bl	8001702 <HAL_NVIC_EnableIRQ>

}
 80010f4:	bf00      	nop
 80010f6:	3728      	adds	r7, #40	; 0x28
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40021000 	.word	0x40021000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800

08001108 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800110c:	b672      	cpsid	i
}
 800110e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001110:	e7fe      	b.n	8001110 <Error_Handler+0x8>
	...

08001114 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800111e:	4a0e      	ldr	r2, [pc, #56]	; (8001158 <HAL_MspInit+0x44>)
 8001120:	f043 0301 	orr.w	r3, r3, #1
 8001124:	6613      	str	r3, [r2, #96]	; 0x60
 8001126:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <HAL_MspInit+0x44>)
 8001128:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	607b      	str	r3, [r7, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001132:	4b09      	ldr	r3, [pc, #36]	; (8001158 <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001136:	4a08      	ldr	r2, [pc, #32]	; (8001158 <HAL_MspInit+0x44>)
 8001138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800113c:	6593      	str	r3, [r2, #88]	; 0x58
 800113e:	4b06      	ldr	r3, [pc, #24]	; (8001158 <HAL_MspInit+0x44>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	603b      	str	r3, [r7, #0]
 8001148:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800114a:	f000 fd57 	bl	8001bfc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800114e:	bf00      	nop
 8001150:	3708      	adds	r7, #8
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40021000 	.word	0x40021000

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b0a2      	sub	sp, #136	; 0x88
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2254      	movs	r2, #84	; 0x54
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f002 faf7 	bl	8003770 <memset>
  if(huart->Instance==LPUART1)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4a5e      	ldr	r2, [pc, #376]	; (8001300 <HAL_UART_MspInit+0x1a4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d139      	bne.n	8001200 <HAL_UART_MspInit+0xa4>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800118c:	2320      	movs	r3, #32
 800118e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001190:	2300      	movs	r3, #0
 8001192:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f001 fa73 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80011a4:	f7ff ffb0 	bl	8001108 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80011a8:	4b56      	ldr	r3, [pc, #344]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011ac:	4a55      	ldr	r2, [pc, #340]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	61fb      	str	r3, [r7, #28]
 80011be:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c0:	4b50      	ldr	r3, [pc, #320]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c4:	4a4f      	ldr	r2, [pc, #316]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011c6:	f043 0301 	orr.w	r3, r3, #1
 80011ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011cc:	4b4d      	ldr	r3, [pc, #308]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80011ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	61bb      	str	r3, [r7, #24]
 80011d6:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80011d8:	230c      	movs	r3, #12
 80011da:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011ea:	230c      	movs	r3, #12
 80011ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80011f4:	4619      	mov	r1, r3
 80011f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011fa:	f000 fa9d 	bl	8001738 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011fe:	e07b      	b.n	80012f8 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART1)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a40      	ldr	r2, [pc, #256]	; (8001308 <HAL_UART_MspInit+0x1ac>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d138      	bne.n	800127c <HAL_UART_MspInit+0x120>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800120a:	2301      	movs	r3, #1
 800120c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800120e:	2300      	movs	r3, #0
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001212:	f107 0320 	add.w	r3, r7, #32
 8001216:	4618      	mov	r0, r3
 8001218:	f001 fa34 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <HAL_UART_MspInit+0xca>
      Error_Handler();
 8001222:	f7ff ff71 	bl	8001108 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001226:	4b37      	ldr	r3, [pc, #220]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 8001228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800122a:	4a36      	ldr	r2, [pc, #216]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 800122c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001230:	6613      	str	r3, [r2, #96]	; 0x60
 8001232:	4b34      	ldr	r3, [pc, #208]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 8001234:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b31      	ldr	r3, [pc, #196]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a30      	ldr	r2, [pc, #192]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b2e      	ldr	r3, [pc, #184]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001256:	2330      	movs	r3, #48	; 0x30
 8001258:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125a:	2302      	movs	r3, #2
 800125c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125e:	2300      	movs	r3, #0
 8001260:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001262:	2300      	movs	r3, #0
 8001264:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001268:	2307      	movs	r3, #7
 800126a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800126e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001272:	4619      	mov	r1, r3
 8001274:	4825      	ldr	r0, [pc, #148]	; (800130c <HAL_UART_MspInit+0x1b0>)
 8001276:	f000 fa5f 	bl	8001738 <HAL_GPIO_Init>
}
 800127a:	e03d      	b.n	80012f8 <HAL_UART_MspInit+0x19c>
  else if(huart->Instance==USART3)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a23      	ldr	r2, [pc, #140]	; (8001310 <HAL_UART_MspInit+0x1b4>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d138      	bne.n	80012f8 <HAL_UART_MspInit+0x19c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001286:	2304      	movs	r3, #4
 8001288:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800128e:	f107 0320 	add.w	r3, r7, #32
 8001292:	4618      	mov	r0, r3
 8001294:	f001 f9f6 	bl	8002684 <HAL_RCCEx_PeriphCLKConfig>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <HAL_UART_MspInit+0x146>
      Error_Handler();
 800129e:	f7ff ff33 	bl	8001108 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ac:	6593      	str	r3, [r2, #88]	; 0x58
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012b6:	60fb      	str	r3, [r7, #12]
 80012b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	4b12      	ldr	r3, [pc, #72]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a11      	ldr	r2, [pc, #68]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_UART_MspInit+0x1a8>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80012d2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80012d6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012e6:	2307      	movs	r3, #7
 80012e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ec:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80012f0:	4619      	mov	r1, r3
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <HAL_UART_MspInit+0x1b8>)
 80012f4:	f000 fa20 	bl	8001738 <HAL_GPIO_Init>
}
 80012f8:	bf00      	nop
 80012fa:	3788      	adds	r7, #136	; 0x88
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40008000 	.word	0x40008000
 8001304:	40021000 	.word	0x40021000
 8001308:	40013800 	.word	0x40013800
 800130c:	48000800 	.word	0x48000800
 8001310:	40004800 	.word	0x40004800
 8001314:	48000400 	.word	0x48000400

08001318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800131c:	e7fe      	b.n	800131c <NMI_Handler+0x4>

0800131e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <HardFault_Handler+0x4>

08001324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <MemManage_Handler+0x4>

0800132a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132e:	e7fe      	b.n	800132e <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	e7fe      	b.n	8001334 <UsageFault_Handler+0x4>

08001336 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001336:	b480      	push	{r7}
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800133a:	bf00      	nop
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr

08001352 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001352:	b480      	push	{r7}
 8001354:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001356:	bf00      	nop
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr

08001360 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001364:	f000 f898 	bl	8001498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001368:	bf00      	nop
 800136a:	bd80      	pop	{r7, pc}

0800136c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001370:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001374:	f000 fb7a 	bl	8001a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}

0800137c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001380:	4b06      	ldr	r3, [pc, #24]	; (800139c <SystemInit+0x20>)
 8001382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001386:	4a05      	ldr	r2, [pc, #20]	; (800139c <SystemInit+0x20>)
 8001388:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800138c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80013a0:	480d      	ldr	r0, [pc, #52]	; (80013d8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80013a2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80013a4:	480d      	ldr	r0, [pc, #52]	; (80013dc <LoopForever+0x6>)
  ldr r1, =_edata
 80013a6:	490e      	ldr	r1, [pc, #56]	; (80013e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80013a8:	4a0e      	ldr	r2, [pc, #56]	; (80013e4 <LoopForever+0xe>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80013ac:	e002      	b.n	80013b4 <LoopCopyDataInit>

080013ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013b2:	3304      	adds	r3, #4

080013b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013b8:	d3f9      	bcc.n	80013ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ba:	4a0b      	ldr	r2, [pc, #44]	; (80013e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80013bc:	4c0b      	ldr	r4, [pc, #44]	; (80013ec <LoopForever+0x16>)
  movs r3, #0
 80013be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013c0:	e001      	b.n	80013c6 <LoopFillZerobss>

080013c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013c4:	3204      	adds	r2, #4

080013c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013c8:	d3fb      	bcc.n	80013c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80013ca:	f7ff ffd7 	bl	800137c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ce:	f002 f9ab 	bl	8003728 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d2:	f7ff fc9d 	bl	8000d10 <main>

080013d6 <LoopForever>:

LoopForever:
    b LoopForever
 80013d6:	e7fe      	b.n	80013d6 <LoopForever>
  ldr   r0, =_estack
 80013d8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80013e4:	080037e8 	.word	0x080037e8
  ldr r2, =_sbss
 80013e8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80013ec:	200001e0 	.word	0x200001e0

080013f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f0:	e7fe      	b.n	80013f0 <ADC1_2_IRQHandler>

080013f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b082      	sub	sp, #8
 80013f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013fc:	2003      	movs	r0, #3
 80013fe:	f000 f95b 	bl	80016b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001402:	2000      	movs	r0, #0
 8001404:	f000 f80e 	bl	8001424 <HAL_InitTick>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d002      	beq.n	8001414 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	71fb      	strb	r3, [r7, #7]
 8001412:	e001      	b.n	8001418 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001414:	f7ff fe7e 	bl	8001114 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001418:	79fb      	ldrb	r3, [r7, #7]

}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800142c:	2300      	movs	r3, #0
 800142e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001430:	4b16      	ldr	r3, [pc, #88]	; (800148c <HAL_InitTick+0x68>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d022      	beq.n	800147e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_InitTick+0x6c>)
 800143a:	681a      	ldr	r2, [r3, #0]
 800143c:	4b13      	ldr	r3, [pc, #76]	; (800148c <HAL_InitTick+0x68>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001444:	fbb1 f3f3 	udiv	r3, r1, r3
 8001448:	fbb2 f3f3 	udiv	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f000 f966 	bl	800171e <HAL_SYSTICK_Config>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d10f      	bne.n	8001478 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2b0f      	cmp	r3, #15
 800145c:	d809      	bhi.n	8001472 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800145e:	2200      	movs	r2, #0
 8001460:	6879      	ldr	r1, [r7, #4]
 8001462:	f04f 30ff 	mov.w	r0, #4294967295
 8001466:	f000 f932 	bl	80016ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800146a:	4a0a      	ldr	r2, [pc, #40]	; (8001494 <HAL_InitTick+0x70>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	e007      	b.n	8001482 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001472:	2301      	movs	r3, #1
 8001474:	73fb      	strb	r3, [r7, #15]
 8001476:	e004      	b.n	8001482 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e001      	b.n	8001482 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3710      	adds	r7, #16
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	20000008 	.word	0x20000008
 8001490:	20000000 	.word	0x20000000
 8001494:	20000004 	.word	0x20000004

08001498 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800149c:	4b05      	ldr	r3, [pc, #20]	; (80014b4 <HAL_IncTick+0x1c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b05      	ldr	r3, [pc, #20]	; (80014b8 <HAL_IncTick+0x20>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a03      	ldr	r2, [pc, #12]	; (80014b4 <HAL_IncTick+0x1c>)
 80014a8:	6013      	str	r3, [r2, #0]
}
 80014aa:	bf00      	nop
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	200001dc 	.word	0x200001dc
 80014b8:	20000008 	.word	0x20000008

080014bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  return uwTick;
 80014c0:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <HAL_GetTick+0x14>)
 80014c2:	681b      	ldr	r3, [r3, #0]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	200001dc 	.word	0x200001dc

080014d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014dc:	f7ff ffee 	bl	80014bc <HAL_GetTick>
 80014e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014ec:	d004      	beq.n	80014f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80014ee:	4b09      	ldr	r3, [pc, #36]	; (8001514 <HAL_Delay+0x40>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	4413      	add	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014f8:	bf00      	nop
 80014fa:	f7ff ffdf 	bl	80014bc <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	68fa      	ldr	r2, [r7, #12]
 8001506:	429a      	cmp	r2, r3
 8001508:	d8f7      	bhi.n	80014fa <HAL_Delay+0x26>
  {
  }
}
 800150a:	bf00      	nop
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000008 	.word	0x20000008

08001518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001518:	b480      	push	{r7}
 800151a:	b085      	sub	sp, #20
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001528:	4b0c      	ldr	r3, [pc, #48]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001534:	4013      	ands	r3, r2
 8001536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001540:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001548:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800154a:	4a04      	ldr	r2, [pc, #16]	; (800155c <__NVIC_SetPriorityGrouping+0x44>)
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	60d3      	str	r3, [r2, #12]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	e000ed00 	.word	0xe000ed00

08001560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001564:	4b04      	ldr	r3, [pc, #16]	; (8001578 <__NVIC_GetPriorityGrouping+0x18>)
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	0a1b      	lsrs	r3, r3, #8
 800156a:	f003 0307 	and.w	r3, r3, #7
}
 800156e:	4618      	mov	r0, r3
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000ed00 	.word	0xe000ed00

0800157c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157c:	b480      	push	{r7}
 800157e:	b083      	sub	sp, #12
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	2b00      	cmp	r3, #0
 800158c:	db0b      	blt.n	80015a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	f003 021f 	and.w	r2, r3, #31
 8001594:	4907      	ldr	r1, [pc, #28]	; (80015b4 <__NVIC_EnableIRQ+0x38>)
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	095b      	lsrs	r3, r3, #5
 800159c:	2001      	movs	r0, #1
 800159e:	fa00 f202 	lsl.w	r2, r0, r2
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015a6:	bf00      	nop
 80015a8:	370c      	adds	r7, #12
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	e000e100 	.word	0xe000e100

080015b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	6039      	str	r1, [r7, #0]
 80015c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	db0a      	blt.n	80015e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	490c      	ldr	r1, [pc, #48]	; (8001604 <__NVIC_SetPriority+0x4c>)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	0112      	lsls	r2, r2, #4
 80015d8:	b2d2      	uxtb	r2, r2
 80015da:	440b      	add	r3, r1
 80015dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015e0:	e00a      	b.n	80015f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	4908      	ldr	r1, [pc, #32]	; (8001608 <__NVIC_SetPriority+0x50>)
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	3b04      	subs	r3, #4
 80015f0:	0112      	lsls	r2, r2, #4
 80015f2:	b2d2      	uxtb	r2, r2
 80015f4:	440b      	add	r3, r1
 80015f6:	761a      	strb	r2, [r3, #24]
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000e100 	.word	0xe000e100
 8001608:	e000ed00 	.word	0xe000ed00

0800160c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800160c:	b480      	push	{r7}
 800160e:	b089      	sub	sp, #36	; 0x24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f1c3 0307 	rsb	r3, r3, #7
 8001626:	2b04      	cmp	r3, #4
 8001628:	bf28      	it	cs
 800162a:	2304      	movcs	r3, #4
 800162c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3304      	adds	r3, #4
 8001632:	2b06      	cmp	r3, #6
 8001634:	d902      	bls.n	800163c <NVIC_EncodePriority+0x30>
 8001636:	69fb      	ldr	r3, [r7, #28]
 8001638:	3b03      	subs	r3, #3
 800163a:	e000      	b.n	800163e <NVIC_EncodePriority+0x32>
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	f04f 32ff 	mov.w	r2, #4294967295
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	43da      	mvns	r2, r3
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	401a      	ands	r2, r3
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001654:	f04f 31ff 	mov.w	r1, #4294967295
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	43d9      	mvns	r1, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001664:	4313      	orrs	r3, r2
         );
}
 8001666:	4618      	mov	r0, r3
 8001668:	3724      	adds	r7, #36	; 0x24
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001684:	d301      	bcc.n	800168a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001686:	2301      	movs	r3, #1
 8001688:	e00f      	b.n	80016aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800168a:	4a0a      	ldr	r2, [pc, #40]	; (80016b4 <SysTick_Config+0x40>)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	3b01      	subs	r3, #1
 8001690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001692:	210f      	movs	r1, #15
 8001694:	f04f 30ff 	mov.w	r0, #4294967295
 8001698:	f7ff ff8e 	bl	80015b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800169c:	4b05      	ldr	r3, [pc, #20]	; (80016b4 <SysTick_Config+0x40>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016a2:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <SysTick_Config+0x40>)
 80016a4:	2207      	movs	r2, #7
 80016a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	e000e010 	.word	0xe000e010

080016b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f7ff ff29 	bl	8001518 <__NVIC_SetPriorityGrouping>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b086      	sub	sp, #24
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	4603      	mov	r3, r0
 80016d6:	60b9      	str	r1, [r7, #8]
 80016d8:	607a      	str	r2, [r7, #4]
 80016da:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016dc:	f7ff ff40 	bl	8001560 <__NVIC_GetPriorityGrouping>
 80016e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	68b9      	ldr	r1, [r7, #8]
 80016e6:	6978      	ldr	r0, [r7, #20]
 80016e8:	f7ff ff90 	bl	800160c <NVIC_EncodePriority>
 80016ec:	4602      	mov	r2, r0
 80016ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016f2:	4611      	mov	r1, r2
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff5f 	bl	80015b8 <__NVIC_SetPriority>
}
 80016fa:	bf00      	nop
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b082      	sub	sp, #8
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800170c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001710:	4618      	mov	r0, r3
 8001712:	f7ff ff33 	bl	800157c <__NVIC_EnableIRQ>
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}

0800171e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffa4 	bl	8001674 <SysTick_Config>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
	...

08001738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001738:	b480      	push	{r7}
 800173a:	b087      	sub	sp, #28
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
 8001740:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001742:	2300      	movs	r3, #0
 8001744:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001746:	e15a      	b.n	80019fe <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	2101      	movs	r1, #1
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	fa01 f303 	lsl.w	r3, r1, r3
 8001754:	4013      	ands	r3, r2
 8001756:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 814c 	beq.w	80019f8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	2b01      	cmp	r3, #1
 800176a:	d005      	beq.n	8001778 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001774:	2b02      	cmp	r3, #2
 8001776:	d130      	bne.n	80017da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689b      	ldr	r3, [r3, #8]
 800177c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	005b      	lsls	r3, r3, #1
 8001782:	2203      	movs	r2, #3
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	43db      	mvns	r3, r3
 800178a:	693a      	ldr	r2, [r7, #16]
 800178c:	4013      	ands	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	68da      	ldr	r2, [r3, #12]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	005b      	lsls	r3, r3, #1
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4313      	orrs	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ae:	2201      	movs	r2, #1
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	fa02 f303 	lsl.w	r3, r2, r3
 80017b6:	43db      	mvns	r3, r3
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	4013      	ands	r3, r2
 80017bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	f003 0201 	and.w	r2, r3, #1
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa02 f303 	lsl.w	r3, r2, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	2b03      	cmp	r3, #3
 80017e4:	d017      	beq.n	8001816 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	68db      	ldr	r3, [r3, #12]
 80017ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	005b      	lsls	r3, r3, #1
 80017f0:	2203      	movs	r2, #3
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43db      	mvns	r3, r3
 80017f8:	693a      	ldr	r2, [r7, #16]
 80017fa:	4013      	ands	r3, r2
 80017fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	689a      	ldr	r2, [r3, #8]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4313      	orrs	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b02      	cmp	r3, #2
 8001820:	d123      	bne.n	800186a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	08da      	lsrs	r2, r3, #3
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3208      	adds	r2, #8
 800182a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	220f      	movs	r2, #15
 800183a:	fa02 f303 	lsl.w	r3, r2, r3
 800183e:	43db      	mvns	r3, r3
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	4013      	ands	r3, r2
 8001844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	691a      	ldr	r2, [r3, #16]
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	fa02 f303 	lsl.w	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	4313      	orrs	r3, r2
 800185a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	08da      	lsrs	r2, r3, #3
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	3208      	adds	r2, #8
 8001864:	6939      	ldr	r1, [r7, #16]
 8001866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	2203      	movs	r2, #3
 8001876:	fa02 f303 	lsl.w	r3, r2, r3
 800187a:	43db      	mvns	r3, r3
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4013      	ands	r3, r2
 8001880:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0203 	and.w	r2, r3, #3
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4313      	orrs	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	f000 80a6 	beq.w	80019f8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ac:	4b5b      	ldr	r3, [pc, #364]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018b0:	4a5a      	ldr	r2, [pc, #360]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018b2:	f043 0301 	orr.w	r3, r3, #1
 80018b6:	6613      	str	r3, [r2, #96]	; 0x60
 80018b8:	4b58      	ldr	r3, [pc, #352]	; (8001a1c <HAL_GPIO_Init+0x2e4>)
 80018ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	60bb      	str	r3, [r7, #8]
 80018c2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c4:	4a56      	ldr	r2, [pc, #344]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	089b      	lsrs	r3, r3, #2
 80018ca:	3302      	adds	r3, #2
 80018cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	f003 0303 	and.w	r3, r3, #3
 80018d8:	009b      	lsls	r3, r3, #2
 80018da:	220f      	movs	r2, #15
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	693a      	ldr	r2, [r7, #16]
 80018e4:	4013      	ands	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ee:	d01f      	beq.n	8001930 <HAL_GPIO_Init+0x1f8>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	4a4c      	ldr	r2, [pc, #304]	; (8001a24 <HAL_GPIO_Init+0x2ec>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d019      	beq.n	800192c <HAL_GPIO_Init+0x1f4>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	4a4b      	ldr	r2, [pc, #300]	; (8001a28 <HAL_GPIO_Init+0x2f0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d013      	beq.n	8001928 <HAL_GPIO_Init+0x1f0>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a4a      	ldr	r2, [pc, #296]	; (8001a2c <HAL_GPIO_Init+0x2f4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d00d      	beq.n	8001924 <HAL_GPIO_Init+0x1ec>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	4a49      	ldr	r2, [pc, #292]	; (8001a30 <HAL_GPIO_Init+0x2f8>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d007      	beq.n	8001920 <HAL_GPIO_Init+0x1e8>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a48      	ldr	r2, [pc, #288]	; (8001a34 <HAL_GPIO_Init+0x2fc>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d101      	bne.n	800191c <HAL_GPIO_Init+0x1e4>
 8001918:	2305      	movs	r3, #5
 800191a:	e00a      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 800191c:	2306      	movs	r3, #6
 800191e:	e008      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001920:	2304      	movs	r3, #4
 8001922:	e006      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001924:	2303      	movs	r3, #3
 8001926:	e004      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001928:	2302      	movs	r3, #2
 800192a:	e002      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 800192c:	2301      	movs	r3, #1
 800192e:	e000      	b.n	8001932 <HAL_GPIO_Init+0x1fa>
 8001930:	2300      	movs	r3, #0
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	f002 0203 	and.w	r2, r2, #3
 8001938:	0092      	lsls	r2, r2, #2
 800193a:	4093      	lsls	r3, r2
 800193c:	693a      	ldr	r2, [r7, #16]
 800193e:	4313      	orrs	r3, r2
 8001940:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001942:	4937      	ldr	r1, [pc, #220]	; (8001a20 <HAL_GPIO_Init+0x2e8>)
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	089b      	lsrs	r3, r3, #2
 8001948:	3302      	adds	r3, #2
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	43db      	mvns	r3, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4013      	ands	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001968:	2b00      	cmp	r3, #0
 800196a:	d003      	beq.n	8001974 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	4313      	orrs	r3, r2
 8001972:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001974:	4a30      	ldr	r2, [pc, #192]	; (8001a38 <HAL_GPIO_Init+0x300>)
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197a:	4b2f      	ldr	r3, [pc, #188]	; (8001a38 <HAL_GPIO_Init+0x300>)
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	693a      	ldr	r2, [r7, #16]
 8001986:	4013      	ands	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001996:	693a      	ldr	r2, [r7, #16]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4313      	orrs	r3, r2
 800199c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800199e:	4a26      	ldr	r2, [pc, #152]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80019a4:	4b24      	ldr	r3, [pc, #144]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	4013      	ands	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d003      	beq.n	80019c8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019c0:	693a      	ldr	r2, [r7, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019c8:	4a1b      	ldr	r2, [pc, #108]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ce:	4b1a      	ldr	r3, [pc, #104]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	43db      	mvns	r3, r3
 80019d8:	693a      	ldr	r2, [r7, #16]
 80019da:	4013      	ands	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d003      	beq.n	80019f2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019ea:	693a      	ldr	r2, [r7, #16]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4313      	orrs	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f2:	4a11      	ldr	r2, [pc, #68]	; (8001a38 <HAL_GPIO_Init+0x300>)
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	fa22 f303 	lsr.w	r3, r2, r3
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f47f ae9d 	bne.w	8001748 <HAL_GPIO_Init+0x10>
  }
}
 8001a0e:	bf00      	nop
 8001a10:	bf00      	nop
 8001a12:	371c      	adds	r7, #28
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	48000400 	.word	0x48000400
 8001a28:	48000800 	.word	0x48000800
 8001a2c:	48000c00 	.word	0x48000c00
 8001a30:	48001000 	.word	0x48001000
 8001a34:	48001400 	.word	0x48001400
 8001a38:	40010400 	.word	0x40010400

08001a3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a4c:	787b      	ldrb	r3, [r7, #1]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a52:	887a      	ldrh	r2, [r7, #2]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a58:	e002      	b.n	8001a60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a5a:	887a      	ldrh	r2, [r7, #2]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a76:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a78:	695a      	ldr	r2, [r3, #20]
 8001a7a:	88fb      	ldrh	r3, [r7, #6]
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d006      	beq.n	8001a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a84:	88fb      	ldrh	r3, [r7, #6]
 8001a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f000 f806 	bl	8001a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40010400 	.word	0x40010400

08001a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d141      	bne.n	8001b46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac2:	4b4b      	ldr	r3, [pc, #300]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ace:	d131      	bne.n	8001b34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad0:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ad6:	4a46      	ldr	r2, [pc, #280]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae0:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae8:	4a41      	ldr	r2, [pc, #260]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001af0:	4b40      	ldr	r3, [pc, #256]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2232      	movs	r2, #50	; 0x32
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a3f      	ldr	r2, [pc, #252]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	0c9b      	lsrs	r3, r3, #18
 8001b02:	3301      	adds	r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b06:	e002      	b.n	8001b0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0e:	4b38      	ldr	r3, [pc, #224]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b1a:	d102      	bne.n	8001b22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1f2      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d158      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e057      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b34:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b3a:	4a2d      	ldr	r2, [pc, #180]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b44:	e04d      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b4c:	d141      	bne.n	8001bd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b4e:	4b28      	ldr	r3, [pc, #160]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b5a:	d131      	bne.n	8001bc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b5c:	4b24      	ldr	r3, [pc, #144]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b74:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b7c:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	2232      	movs	r2, #50	; 0x32
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4a1c      	ldr	r2, [pc, #112]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	3301      	adds	r3, #1
 8001b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b92:	e002      	b.n	8001b9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba6:	d102      	bne.n	8001bae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d1f2      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bba:	d112      	bne.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e011      	b.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001bd0:	e007      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd2:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bda:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3714      	adds	r7, #20
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	20000000 	.word	0x20000000
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001c00:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a04      	ldr	r2, [pc, #16]	; (8001c18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001c06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0a:	6093      	str	r3, [r2, #8]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40007000 	.word	0x40007000

08001c1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d101      	bne.n	8001c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	e306      	b.n	800223c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d075      	beq.n	8001d26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c3a:	4b97      	ldr	r3, [pc, #604]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c44:	4b94      	ldr	r3, [pc, #592]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	f003 0303 	and.w	r3, r3, #3
 8001c4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b0c      	cmp	r3, #12
 8001c52:	d102      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3e>
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	2b03      	cmp	r3, #3
 8001c58:	d002      	beq.n	8001c60 <HAL_RCC_OscConfig+0x44>
 8001c5a:	69bb      	ldr	r3, [r7, #24]
 8001c5c:	2b08      	cmp	r3, #8
 8001c5e:	d10b      	bne.n	8001c78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c60:	4b8d      	ldr	r3, [pc, #564]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d05b      	beq.n	8001d24 <HAL_RCC_OscConfig+0x108>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d157      	bne.n	8001d24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e2e1      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_OscConfig+0x74>
 8001c82:	4b85      	ldr	r3, [pc, #532]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a84      	ldr	r2, [pc, #528]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8c:	6013      	str	r3, [r2, #0]
 8001c8e:	e01d      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x98>
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001ca0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ca4:	6013      	str	r3, [r2, #0]
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a7b      	ldr	r2, [pc, #492]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cb0:	6013      	str	r3, [r2, #0]
 8001cb2:	e00b      	b.n	8001ccc <HAL_RCC_OscConfig+0xb0>
 8001cb4:	4b78      	ldr	r3, [pc, #480]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a77      	ldr	r2, [pc, #476]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cbe:	6013      	str	r3, [r2, #0]
 8001cc0:	4b75      	ldr	r3, [pc, #468]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a74      	ldr	r2, [pc, #464]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	685b      	ldr	r3, [r3, #4]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d013      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fbf2 	bl	80014bc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff fbee 	bl	80014bc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	; 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e2a6      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cee:	4b6a      	ldr	r3, [pc, #424]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0xc0>
 8001cfa:	e014      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfc:	f7ff fbde 	bl	80014bc <HAL_GetTick>
 8001d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d04:	f7ff fbda 	bl	80014bc <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b64      	cmp	r3, #100	; 0x64
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e292      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d16:	4b60      	ldr	r3, [pc, #384]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1f0      	bne.n	8001d04 <HAL_RCC_OscConfig+0xe8>
 8001d22:	e000      	b.n	8001d26 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d075      	beq.n	8001e1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d32:	4b59      	ldr	r3, [pc, #356]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f003 030c 	and.w	r3, r3, #12
 8001d3a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d3c:	4b56      	ldr	r3, [pc, #344]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	2b0c      	cmp	r3, #12
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0x136>
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d002      	beq.n	8001d58 <HAL_RCC_OscConfig+0x13c>
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	d11f      	bne.n	8001d98 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d58:	4b4f      	ldr	r3, [pc, #316]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d005      	beq.n	8001d70 <HAL_RCC_OscConfig+0x154>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d101      	bne.n	8001d70 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e265      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d70:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	691b      	ldr	r3, [r3, #16]
 8001d7c:	061b      	lsls	r3, r3, #24
 8001d7e:	4946      	ldr	r1, [pc, #280]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001d80:	4313      	orrs	r3, r2
 8001d82:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d84:	4b45      	ldr	r3, [pc, #276]	; (8001e9c <HAL_RCC_OscConfig+0x280>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fb4b 	bl	8001424 <HAL_InitTick>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d043      	beq.n	8001e1c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e251      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d023      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001da0:	4b3d      	ldr	r3, [pc, #244]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3c      	ldr	r2, [pc, #240]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001da6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff fb86 	bl	80014bc <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff fb82 	bl	80014bc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e23a      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc6:	4b34      	ldr	r3, [pc, #208]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d0f0      	beq.n	8001db4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	691b      	ldr	r3, [r3, #16]
 8001dde:	061b      	lsls	r3, r3, #24
 8001de0:	492d      	ldr	r1, [pc, #180]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
 8001de6:	e01a      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001de8:	4b2b      	ldr	r3, [pc, #172]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a2a      	ldr	r2, [pc, #168]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001df4:	f7ff fb62 	bl	80014bc <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fb5e 	bl	80014bc <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e216      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e0e:	4b22      	ldr	r3, [pc, #136]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1e0>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0308 	and.w	r3, r3, #8
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d041      	beq.n	8001eae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d01c      	beq.n	8001e6c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e32:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e38:	4a17      	ldr	r2, [pc, #92]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7ff fb3b 	bl	80014bc <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7ff fb37 	bl	80014bc <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1ef      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0ef      	beq.n	8001e4a <HAL_RCC_OscConfig+0x22e>
 8001e6a:	e020      	b.n	8001eae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e6c:	4b0a      	ldr	r3, [pc, #40]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e72:	4a09      	ldr	r2, [pc, #36]	; (8001e98 <HAL_RCC_OscConfig+0x27c>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e7c:	f7ff fb1e 	bl	80014bc <HAL_GetTick>
 8001e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e82:	e00d      	b.n	8001ea0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e84:	f7ff fb1a 	bl	80014bc <HAL_GetTick>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	2b02      	cmp	r3, #2
 8001e90:	d906      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e1d2      	b.n	800223c <HAL_RCC_OscConfig+0x620>
 8001e96:	bf00      	nop
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ea      	bne.n	8001e84 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0304 	and.w	r3, r3, #4
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	f000 80a6 	beq.w	8002008 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ec0:	4b84      	ldr	r3, [pc, #528]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2b4>
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e000      	b.n	8001ed2 <HAL_RCC_OscConfig+0x2b6>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00d      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ed6:	4b7f      	ldr	r3, [pc, #508]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	4a7e      	ldr	r2, [pc, #504]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ee2:	4b7c      	ldr	r3, [pc, #496]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef2:	4b79      	ldr	r3, [pc, #484]	; (80020d8 <HAL_RCC_OscConfig+0x4bc>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d118      	bne.n	8001f30 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001efe:	4b76      	ldr	r3, [pc, #472]	; (80020d8 <HAL_RCC_OscConfig+0x4bc>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a75      	ldr	r2, [pc, #468]	; (80020d8 <HAL_RCC_OscConfig+0x4bc>)
 8001f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f0a:	f7ff fad7 	bl	80014bc <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f12:	f7ff fad3 	bl	80014bc <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e18b      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f24:	4b6c      	ldr	r3, [pc, #432]	; (80020d8 <HAL_RCC_OscConfig+0x4bc>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d0f0      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_RCC_OscConfig+0x32e>
 8001f38:	4b66      	ldr	r3, [pc, #408]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3e:	4a65      	ldr	r2, [pc, #404]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f40:	f043 0301 	orr.w	r3, r3, #1
 8001f44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f48:	e024      	b.n	8001f94 <HAL_RCC_OscConfig+0x378>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b05      	cmp	r3, #5
 8001f50:	d110      	bne.n	8001f74 <HAL_RCC_OscConfig+0x358>
 8001f52:	4b60      	ldr	r3, [pc, #384]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f58:	4a5e      	ldr	r2, [pc, #376]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f62:	4b5c      	ldr	r3, [pc, #368]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f68:	4a5a      	ldr	r2, [pc, #360]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f6a:	f043 0301 	orr.w	r3, r3, #1
 8001f6e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f72:	e00f      	b.n	8001f94 <HAL_RCC_OscConfig+0x378>
 8001f74:	4b57      	ldr	r3, [pc, #348]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f7a:	4a56      	ldr	r2, [pc, #344]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f7c:	f023 0301 	bic.w	r3, r3, #1
 8001f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f84:	4b53      	ldr	r3, [pc, #332]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8a:	4a52      	ldr	r2, [pc, #328]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001f8c:	f023 0304 	bic.w	r3, r3, #4
 8001f90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9c:	f7ff fa8e 	bl	80014bc <HAL_GetTick>
 8001fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00a      	b.n	8001fba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fa8a 	bl	80014bc <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e140      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fba:	4b46      	ldr	r3, [pc, #280]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d0ed      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x388>
 8001fc8:	e015      	b.n	8001ff6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fca:	f7ff fa77 	bl	80014bc <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7ff fa73 	bl	80014bc <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d901      	bls.n	8001fe8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	e129      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1ed      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ff6:	7ffb      	ldrb	r3, [r7, #31]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d105      	bne.n	8002008 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ffc:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8001ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002000:	4a34      	ldr	r2, [pc, #208]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8002002:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002006:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 0320 	and.w	r3, r3, #32
 8002010:	2b00      	cmp	r3, #0
 8002012:	d03c      	beq.n	800208e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d01c      	beq.n	8002056 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 800201e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8002024:	f043 0301 	orr.w	r3, r3, #1
 8002028:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800202c:	f7ff fa46 	bl	80014bc <HAL_GetTick>
 8002030:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002032:	e008      	b.n	8002046 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002034:	f7ff fa42 	bl	80014bc <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b02      	cmp	r3, #2
 8002040:	d901      	bls.n	8002046 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e0fa      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002046:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8002048:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800204c:	f003 0302 	and.w	r3, r3, #2
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0ef      	beq.n	8002034 <HAL_RCC_OscConfig+0x418>
 8002054:	e01b      	b.n	800208e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002056:	4b1f      	ldr	r3, [pc, #124]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8002058:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205c:	4a1d      	ldr	r2, [pc, #116]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002066:	f7ff fa29 	bl	80014bc <HAL_GetTick>
 800206a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800206c:	e008      	b.n	8002080 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800206e:	f7ff fa25 	bl	80014bc <HAL_GetTick>
 8002072:	4602      	mov	r2, r0
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	1ad3      	subs	r3, r2, r3
 8002078:	2b02      	cmp	r3, #2
 800207a:	d901      	bls.n	8002080 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e0dd      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 8002082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d1ef      	bne.n	800206e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	2b00      	cmp	r3, #0
 8002094:	f000 80d1 	beq.w	800223a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002098:	4b0e      	ldr	r3, [pc, #56]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 800209a:	689b      	ldr	r3, [r3, #8]
 800209c:	f003 030c 	and.w	r3, r3, #12
 80020a0:	2b0c      	cmp	r3, #12
 80020a2:	f000 808b 	beq.w	80021bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	2b02      	cmp	r3, #2
 80020ac:	d15e      	bne.n	800216c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ae:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_RCC_OscConfig+0x4b8>)
 80020b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7ff f9ff 	bl	80014bc <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c0:	e00c      	b.n	80020dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020c2:	f7ff f9fb 	bl	80014bc <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d905      	bls.n	80020dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0b3      	b.n	800223c <HAL_RCC_OscConfig+0x620>
 80020d4:	40021000 	.word	0x40021000
 80020d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020dc:	4b59      	ldr	r3, [pc, #356]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1ec      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020e8:	4b56      	ldr	r3, [pc, #344]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	4b56      	ldr	r3, [pc, #344]	; (8002248 <HAL_RCC_OscConfig+0x62c>)
 80020ee:	4013      	ands	r3, r2
 80020f0:	687a      	ldr	r2, [r7, #4]
 80020f2:	6a11      	ldr	r1, [r2, #32]
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020f8:	3a01      	subs	r2, #1
 80020fa:	0112      	lsls	r2, r2, #4
 80020fc:	4311      	orrs	r1, r2
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002102:	0212      	lsls	r2, r2, #8
 8002104:	4311      	orrs	r1, r2
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800210a:	0852      	lsrs	r2, r2, #1
 800210c:	3a01      	subs	r2, #1
 800210e:	0552      	lsls	r2, r2, #21
 8002110:	4311      	orrs	r1, r2
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002116:	0852      	lsrs	r2, r2, #1
 8002118:	3a01      	subs	r2, #1
 800211a:	0652      	lsls	r2, r2, #25
 800211c:	4311      	orrs	r1, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002122:	06d2      	lsls	r2, r2, #27
 8002124:	430a      	orrs	r2, r1
 8002126:	4947      	ldr	r1, [pc, #284]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 8002128:	4313      	orrs	r3, r2
 800212a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800212c:	4b45      	ldr	r3, [pc, #276]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a44      	ldr	r2, [pc, #272]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 8002132:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002136:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002138:	4b42      	ldr	r3, [pc, #264]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800213a:	68db      	ldr	r3, [r3, #12]
 800213c:	4a41      	ldr	r2, [pc, #260]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002142:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002144:	f7ff f9ba 	bl	80014bc <HAL_GetTick>
 8002148:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800214a:	e008      	b.n	800215e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800214c:	f7ff f9b6 	bl	80014bc <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d901      	bls.n	800215e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e06e      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b39      	ldr	r3, [pc, #228]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d0f0      	beq.n	800214c <HAL_RCC_OscConfig+0x530>
 800216a:	e066      	b.n	800223a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800216c:	4b35      	ldr	r3, [pc, #212]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a34      	ldr	r2, [pc, #208]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 8002172:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002176:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002178:	4b32      	ldr	r3, [pc, #200]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	4a31      	ldr	r2, [pc, #196]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800217e:	f023 0303 	bic.w	r3, r3, #3
 8002182:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002184:	4b2f      	ldr	r3, [pc, #188]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	4a2e      	ldr	r2, [pc, #184]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 800218a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f992 	bl	80014bc <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219c:	f7ff f98e 	bl	80014bc <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e046      	b.n	800223c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ae:	4b25      	ldr	r3, [pc, #148]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d1f0      	bne.n	800219c <HAL_RCC_OscConfig+0x580>
 80021ba:	e03e      	b.n	800223a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69db      	ldr	r3, [r3, #28]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	e039      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80021c8:	4b1e      	ldr	r3, [pc, #120]	; (8002244 <HAL_RCC_OscConfig+0x628>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f003 0203 	and.w	r2, r3, #3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d12c      	bne.n	8002236 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d123      	bne.n	8002236 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11b      	bne.n	8002236 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800220a:	429a      	cmp	r2, r3
 800220c:	d113      	bne.n	8002236 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	085b      	lsrs	r3, r3, #1
 800221a:	3b01      	subs	r3, #1
 800221c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800221e:	429a      	cmp	r2, r3
 8002220:	d109      	bne.n	8002236 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d001      	beq.n	800223a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e000      	b.n	800223c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40021000 	.word	0x40021000
 8002248:	019f800c 	.word	0x019f800c

0800224c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e11e      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002264:	4b91      	ldr	r3, [pc, #580]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f003 030f 	and.w	r3, r3, #15
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	429a      	cmp	r2, r3
 8002270:	d910      	bls.n	8002294 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f023 020f 	bic.w	r2, r3, #15
 800227a:	498c      	ldr	r1, [pc, #560]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	4313      	orrs	r3, r2
 8002280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002282:	4b8a      	ldr	r3, [pc, #552]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	683a      	ldr	r2, [r7, #0]
 800228c:	429a      	cmp	r2, r3
 800228e:	d001      	beq.n	8002294 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e106      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d073      	beq.n	8002388 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d129      	bne.n	80022fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a8:	4b81      	ldr	r3, [pc, #516]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e0f4      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80022b8:	f000 f99e 	bl	80025f8 <RCC_GetSysClockFreqFromPLLSource>
 80022bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	4a7c      	ldr	r2, [pc, #496]	; (80024b4 <HAL_RCC_ClockConfig+0x268>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d93f      	bls.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022c6:	4b7a      	ldr	r3, [pc, #488]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d009      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d033      	beq.n	8002346 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d12f      	bne.n	8002346 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022e6:	4b72      	ldr	r3, [pc, #456]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ee:	4a70      	ldr	r2, [pc, #448]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80022f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022f6:	2380      	movs	r3, #128	; 0x80
 80022f8:	617b      	str	r3, [r7, #20]
 80022fa:	e024      	b.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b02      	cmp	r3, #2
 8002302:	d107      	bne.n	8002314 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002304:	4b6a      	ldr	r3, [pc, #424]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d109      	bne.n	8002324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0c6      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002314:	4b66      	ldr	r3, [pc, #408]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e0be      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002324:	f000 f8ce 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002328:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	4a61      	ldr	r2, [pc, #388]	; (80024b4 <HAL_RCC_ClockConfig+0x268>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d909      	bls.n	8002346 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002332:	4b5f      	ldr	r3, [pc, #380]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800233a:	4a5d      	ldr	r2, [pc, #372]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 800233c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002340:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002342:	2380      	movs	r3, #128	; 0x80
 8002344:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002346:	4b5a      	ldr	r3, [pc, #360]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	f023 0203 	bic.w	r2, r3, #3
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	4957      	ldr	r1, [pc, #348]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002354:	4313      	orrs	r3, r2
 8002356:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002358:	f7ff f8b0 	bl	80014bc <HAL_GetTick>
 800235c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	e00a      	b.n	8002376 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002360:	f7ff f8ac 	bl	80014bc <HAL_GetTick>
 8002364:	4602      	mov	r2, r0
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1ad3      	subs	r3, r2, r3
 800236a:	f241 3288 	movw	r2, #5000	; 0x1388
 800236e:	4293      	cmp	r3, r2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e095      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002376:	4b4e      	ldr	r3, [pc, #312]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 020c 	and.w	r2, r3, #12
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	429a      	cmp	r2, r3
 8002386:	d1eb      	bne.n	8002360 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d023      	beq.n	80023dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b43      	ldr	r3, [pc, #268]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	4a42      	ldr	r2, [pc, #264]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d007      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80023b8:	4b3d      	ldr	r3, [pc, #244]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80023c0:	4a3b      	ldr	r2, [pc, #236]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80023c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c8:	4b39      	ldr	r3, [pc, #228]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4936      	ldr	r1, [pc, #216]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]
 80023da:	e008      	b.n	80023ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	2b80      	cmp	r3, #128	; 0x80
 80023e0:	d105      	bne.n	80023ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023e2:	4b33      	ldr	r3, [pc, #204]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	4a32      	ldr	r2, [pc, #200]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 80023e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	683a      	ldr	r2, [r7, #0]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d21d      	bcs.n	8002438 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023fc:	4b2b      	ldr	r3, [pc, #172]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f023 020f 	bic.w	r2, r3, #15
 8002404:	4929      	ldr	r1, [pc, #164]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	4313      	orrs	r3, r2
 800240a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800240c:	f7ff f856 	bl	80014bc <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002412:	e00a      	b.n	800242a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002414:	f7ff f852 	bl	80014bc <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002422:	4293      	cmp	r3, r2
 8002424:	d901      	bls.n	800242a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e03b      	b.n	80024a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800242a:	4b20      	ldr	r3, [pc, #128]	; (80024ac <HAL_RCC_ClockConfig+0x260>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d1ed      	bne.n	8002414 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002444:	4b1a      	ldr	r3, [pc, #104]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	68db      	ldr	r3, [r3, #12]
 8002450:	4917      	ldr	r1, [pc, #92]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002452:	4313      	orrs	r3, r2
 8002454:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0308 	and.w	r3, r3, #8
 800245e:	2b00      	cmp	r3, #0
 8002460:	d009      	beq.n	8002476 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002462:	4b13      	ldr	r3, [pc, #76]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	490f      	ldr	r1, [pc, #60]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 8002472:	4313      	orrs	r3, r2
 8002474:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002476:	f000 f825 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800247a:	4602      	mov	r2, r0
 800247c:	4b0c      	ldr	r3, [pc, #48]	; (80024b0 <HAL_RCC_ClockConfig+0x264>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	091b      	lsrs	r3, r3, #4
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	490c      	ldr	r1, [pc, #48]	; (80024b8 <HAL_RCC_ClockConfig+0x26c>)
 8002488:	5ccb      	ldrb	r3, [r1, r3]
 800248a:	f003 031f 	and.w	r3, r3, #31
 800248e:	fa22 f303 	lsr.w	r3, r2, r3
 8002492:	4a0a      	ldr	r2, [pc, #40]	; (80024bc <HAL_RCC_ClockConfig+0x270>)
 8002494:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002496:	4b0a      	ldr	r3, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x274>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe ffc2 	bl	8001424 <HAL_InitTick>
 80024a0:	4603      	mov	r3, r0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3718      	adds	r7, #24
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000
 80024b0:	40021000 	.word	0x40021000
 80024b4:	04c4b400 	.word	0x04c4b400
 80024b8:	08003798 	.word	0x08003798
 80024bc:	20000000 	.word	0x20000000
 80024c0:	20000004 	.word	0x20000004

080024c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b087      	sub	sp, #28
 80024c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024ca:	4b2c      	ldr	r3, [pc, #176]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	d102      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024d6:	4b2a      	ldr	r3, [pc, #168]	; (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024d8:	613b      	str	r3, [r7, #16]
 80024da:	e047      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b08      	cmp	r3, #8
 80024e6:	d102      	bne.n	80024ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024e8:	4b26      	ldr	r3, [pc, #152]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	e03e      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024ee:	4b23      	ldr	r3, [pc, #140]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
 80024f6:	2b0c      	cmp	r3, #12
 80024f8:	d136      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024fa:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002504:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	091b      	lsrs	r3, r3, #4
 800250a:	f003 030f 	and.w	r3, r3, #15
 800250e:	3301      	adds	r3, #1
 8002510:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b03      	cmp	r3, #3
 8002516:	d10c      	bne.n	8002532 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002518:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_RCC_GetSysClockFreq+0xc0>)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002520:	4a16      	ldr	r2, [pc, #88]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	68d2      	ldr	r2, [r2, #12]
 8002524:	0a12      	lsrs	r2, r2, #8
 8002526:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800252a:	fb02 f303 	mul.w	r3, r2, r3
 800252e:	617b      	str	r3, [r7, #20]
      break;
 8002530:	e00c      	b.n	800254c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002532:	4a13      	ldr	r2, [pc, #76]	; (8002580 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	fbb2 f3f3 	udiv	r3, r2, r3
 800253a:	4a10      	ldr	r2, [pc, #64]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 800253c:	68d2      	ldr	r2, [r2, #12]
 800253e:	0a12      	lsrs	r2, r2, #8
 8002540:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002544:	fb02 f303 	mul.w	r3, r2, r3
 8002548:	617b      	str	r3, [r7, #20]
      break;
 800254a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800254c:	4b0b      	ldr	r3, [pc, #44]	; (800257c <HAL_RCC_GetSysClockFreq+0xb8>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	0e5b      	lsrs	r3, r3, #25
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	3301      	adds	r3, #1
 8002558:	005b      	lsls	r3, r3, #1
 800255a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	fbb2 f3f3 	udiv	r3, r2, r3
 8002564:	613b      	str	r3, [r7, #16]
 8002566:	e001      	b.n	800256c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002568:	2300      	movs	r3, #0
 800256a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800256c:	693b      	ldr	r3, [r7, #16]
}
 800256e:	4618      	mov	r0, r3
 8002570:	371c      	adds	r7, #28
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40021000 	.word	0x40021000
 8002580:	00f42400 	.word	0x00f42400
 8002584:	016e3600 	.word	0x016e3600

08002588 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <HAL_RCC_GetHCLKFreq+0x14>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	4618      	mov	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	20000000 	.word	0x20000000

080025a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80025a4:	f7ff fff0 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	080037a8 	.word	0x080037a8

080025cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025d0:	f7ff ffda 	bl	8002588 <HAL_RCC_GetHCLKFreq>
 80025d4:	4602      	mov	r2, r0
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	0adb      	lsrs	r3, r3, #11
 80025dc:	f003 0307 	and.w	r3, r3, #7
 80025e0:	4904      	ldr	r1, [pc, #16]	; (80025f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025e2:	5ccb      	ldrb	r3, [r1, r3]
 80025e4:	f003 031f 	and.w	r3, r3, #31
 80025e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40021000 	.word	0x40021000
 80025f4:	080037a8 	.word	0x080037a8

080025f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025fe:	4b1e      	ldr	r3, [pc, #120]	; (8002678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f003 0303 	and.w	r3, r3, #3
 8002606:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002608:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3301      	adds	r3, #1
 8002614:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	2b03      	cmp	r3, #3
 800261a:	d10c      	bne.n	8002636 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800261c:	4a17      	ldr	r2, [pc, #92]	; (800267c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	fbb2 f3f3 	udiv	r3, r2, r3
 8002624:	4a14      	ldr	r2, [pc, #80]	; (8002678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002626:	68d2      	ldr	r2, [r2, #12]
 8002628:	0a12      	lsrs	r2, r2, #8
 800262a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
    break;
 8002634:	e00c      	b.n	8002650 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	fbb2 f3f3 	udiv	r3, r2, r3
 800263e:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002640:	68d2      	ldr	r2, [r2, #12]
 8002642:	0a12      	lsrs	r2, r2, #8
 8002644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002648:	fb02 f303 	mul.w	r3, r2, r3
 800264c:	617b      	str	r3, [r7, #20]
    break;
 800264e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002650:	4b09      	ldr	r3, [pc, #36]	; (8002678 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	0e5b      	lsrs	r3, r3, #25
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	fbb2 f3f3 	udiv	r3, r2, r3
 8002668:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800266a:	687b      	ldr	r3, [r7, #4]
}
 800266c:	4618      	mov	r0, r3
 800266e:	371c      	adds	r7, #28
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000
 800267c:	016e3600 	.word	0x016e3600
 8002680:	00f42400 	.word	0x00f42400

08002684 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800268c:	2300      	movs	r3, #0
 800268e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002690:	2300      	movs	r3, #0
 8002692:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269c:	2b00      	cmp	r3, #0
 800269e:	f000 8098 	beq.w	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026a2:	2300      	movs	r3, #0
 80026a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026a6:	4b43      	ldr	r3, [pc, #268]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d10d      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026b2:	4b40      	ldr	r3, [pc, #256]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026b6:	4a3f      	ldr	r2, [pc, #252]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026bc:	6593      	str	r3, [r2, #88]	; 0x58
 80026be:	4b3d      	ldr	r3, [pc, #244]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026c6:	60bb      	str	r3, [r7, #8]
 80026c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ca:	2301      	movs	r3, #1
 80026cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026ce:	4b3a      	ldr	r3, [pc, #232]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a39      	ldr	r2, [pc, #228]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026da:	f7fe feef 	bl	80014bc <HAL_GetTick>
 80026de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026e0:	e009      	b.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026e2:	f7fe feeb 	bl	80014bc <HAL_GetTick>
 80026e6:	4602      	mov	r2, r0
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d902      	bls.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	74fb      	strb	r3, [r7, #19]
        break;
 80026f4:	e005      	b.n	8002702 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026f6:	4b30      	ldr	r3, [pc, #192]	; (80027b8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0ef      	beq.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d159      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002708:	4b2a      	ldr	r3, [pc, #168]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002712:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d01e      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	429a      	cmp	r2, r3
 8002722:	d019      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002724:	4b23      	ldr	r3, [pc, #140]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800272a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800272e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002730:	4b20      	ldr	r3, [pc, #128]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a1f      	ldr	r2, [pc, #124]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002740:	4b1c      	ldr	r3, [pc, #112]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002748:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800274c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002750:	4a18      	ldr	r2, [pc, #96]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002762:	f7fe feab 	bl	80014bc <HAL_GetTick>
 8002766:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002768:	e00b      	b.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800276a:	f7fe fea7 	bl	80014bc <HAL_GetTick>
 800276e:	4602      	mov	r2, r0
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	1ad3      	subs	r3, r2, r3
 8002774:	f241 3288 	movw	r2, #5000	; 0x1388
 8002778:	4293      	cmp	r3, r2
 800277a:	d902      	bls.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	74fb      	strb	r3, [r7, #19]
            break;
 8002780:	e006      	b.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002782:	4b0c      	ldr	r3, [pc, #48]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0ec      	beq.n	800276a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10b      	bne.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002796:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002798:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027a4:	4903      	ldr	r1, [pc, #12]	; (80027b4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027ae:	7cfb      	ldrb	r3, [r7, #19]
 80027b0:	74bb      	strb	r3, [r7, #18]
 80027b2:	e005      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027c0:	7c7b      	ldrb	r3, [r7, #17]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d105      	bne.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027c6:	4ba7      	ldr	r3, [pc, #668]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ca:	4aa6      	ldr	r2, [pc, #664]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027d0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027de:	4ba1      	ldr	r3, [pc, #644]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027e4:	f023 0203 	bic.w	r2, r3, #3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	499d      	ldr	r1, [pc, #628]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0302 	and.w	r3, r3, #2
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d00a      	beq.n	8002816 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002800:	4b98      	ldr	r3, [pc, #608]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002806:	f023 020c 	bic.w	r2, r3, #12
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	4995      	ldr	r1, [pc, #596]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002810:	4313      	orrs	r3, r2
 8002812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002822:	4b90      	ldr	r3, [pc, #576]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002828:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	498c      	ldr	r1, [pc, #560]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002832:	4313      	orrs	r3, r2
 8002834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00a      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002844:	4b87      	ldr	r3, [pc, #540]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800284a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	4984      	ldr	r1, [pc, #528]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002854:	4313      	orrs	r3, r2
 8002856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0310 	and.w	r3, r3, #16
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002866:	4b7f      	ldr	r3, [pc, #508]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800286c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	497b      	ldr	r1, [pc, #492]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002876:	4313      	orrs	r3, r2
 8002878:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0320 	and.w	r3, r3, #32
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002888:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	4973      	ldr	r1, [pc, #460]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002898:	4313      	orrs	r3, r2
 800289a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d00a      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028aa:	4b6e      	ldr	r3, [pc, #440]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	69db      	ldr	r3, [r3, #28]
 80028b8:	496a      	ldr	r1, [pc, #424]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d00a      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028cc:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	4962      	ldr	r1, [pc, #392]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d00a      	beq.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028ee:	4b5d      	ldr	r3, [pc, #372]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	4959      	ldr	r1, [pc, #356]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d00a      	beq.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002910:	4b54      	ldr	r3, [pc, #336]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002912:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800291e:	4951      	ldr	r1, [pc, #324]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002920:	4313      	orrs	r3, r2
 8002922:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292e:	2b00      	cmp	r3, #0
 8002930:	d00a      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002932:	4b4c      	ldr	r3, [pc, #304]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002938:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002940:	4948      	ldr	r1, [pc, #288]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002942:	4313      	orrs	r3, r2
 8002944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002950:	2b00      	cmp	r3, #0
 8002952:	d015      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002954:	4b43      	ldr	r3, [pc, #268]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4940      	ldr	r1, [pc, #256]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002972:	d105      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002974:	4b3b      	ldr	r3, [pc, #236]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002976:	68db      	ldr	r3, [r3, #12]
 8002978:	4a3a      	ldr	r2, [pc, #232]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800297a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800297e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800298c:	4b35      	ldr	r3, [pc, #212]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299a:	4932      	ldr	r1, [pc, #200]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029ac:	4b2d      	ldr	r3, [pc, #180]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a2c      	ldr	r2, [pc, #176]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029b6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80029c4:	4b27      	ldr	r3, [pc, #156]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d2:	4924      	ldr	r1, [pc, #144]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029e4:	4b1f      	ldr	r3, [pc, #124]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a1e      	ldr	r2, [pc, #120]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029fc:	4b19      	ldr	r3, [pc, #100]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	4916      	ldr	r1, [pc, #88]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b11      	ldr	r3, [pc, #68]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a10      	ldr	r2, [pc, #64]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d019      	beq.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a34:	4b0b      	ldr	r3, [pc, #44]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	4908      	ldr	r1, [pc, #32]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a44:	4313      	orrs	r3, r2
 8002a46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a52:	d109      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a54:	4b03      	ldr	r3, [pc, #12]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a56:	68db      	ldr	r3, [r3, #12]
 8002a58:	4a02      	ldr	r2, [pc, #8]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a5e:	60d3      	str	r3, [r2, #12]
 8002a60:	e002      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a62:	bf00      	nop
 8002a64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d015      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a74:	4b29      	ldr	r3, [pc, #164]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a82:	4926      	ldr	r1, [pc, #152]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a84:	4313      	orrs	r3, r2
 8002a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a92:	d105      	bne.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a94:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a96:	68db      	ldr	r3, [r3, #12]
 8002a98:	4a20      	ldr	r2, [pc, #128]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d015      	beq.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aba:	4918      	ldr	r1, [pc, #96]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002acc:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ad2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ad6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d015      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ae4:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ae6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002aea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af2:	490a      	ldr	r1, [pc, #40]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002afe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b02:	d105      	bne.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b04:	4b05      	ldr	r3, [pc, #20]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	4a04      	ldr	r2, [pc, #16]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002b0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002b10:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3718      	adds	r7, #24
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000

08002b20 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e042      	b.n	8002bb8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d106      	bne.n	8002b4a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f7fe fb09 	bl	800115c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2224      	movs	r2, #36	; 0x24
 8002b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681a      	ldr	r2, [r3, #0]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 f82c 	bl	8002bc0 <UART_SetConfig>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d101      	bne.n	8002b72 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e022      	b.n	8002bb8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d002      	beq.n	8002b80 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 fb1c 	bl	80031b8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	685a      	ldr	r2, [r3, #4]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b8e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b9e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 fba3 	bl	80032fc <UART_CheckIdleState>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bc4:	b08c      	sub	sp, #48	; 0x30
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	689a      	ldr	r2, [r3, #8]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	695b      	ldr	r3, [r3, #20]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	69db      	ldr	r3, [r3, #28]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	4baa      	ldr	r3, [pc, #680]	; (8002e98 <UART_SetConfig+0x2d8>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	697a      	ldr	r2, [r7, #20]
 8002bf4:	6812      	ldr	r2, [r2, #0]
 8002bf6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002bf8:	430b      	orrs	r3, r1
 8002bfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a9f      	ldr	r2, [pc, #636]	; (8002e9c <UART_SetConfig+0x2dc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d004      	beq.n	8002c2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	6a1b      	ldr	r3, [r3, #32]
 8002c26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002c36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	6812      	ldr	r2, [r2, #0]
 8002c3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002c40:	430b      	orrs	r3, r1
 8002c42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4a:	f023 010f 	bic.w	r1, r3, #15
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a90      	ldr	r2, [pc, #576]	; (8002ea0 <UART_SetConfig+0x2e0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d125      	bne.n	8002cb0 <UART_SetConfig+0xf0>
 8002c64:	4b8f      	ldr	r3, [pc, #572]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002c66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c6a:	f003 0303 	and.w	r3, r3, #3
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d81a      	bhi.n	8002ca8 <UART_SetConfig+0xe8>
 8002c72:	a201      	add	r2, pc, #4	; (adr r2, 8002c78 <UART_SetConfig+0xb8>)
 8002c74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c78:	08002c89 	.word	0x08002c89
 8002c7c:	08002c99 	.word	0x08002c99
 8002c80:	08002c91 	.word	0x08002c91
 8002c84:	08002ca1 	.word	0x08002ca1
 8002c88:	2301      	movs	r3, #1
 8002c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c8e:	e116      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002c90:	2302      	movs	r3, #2
 8002c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c96:	e112      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c9e:	e10e      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002ca0:	2308      	movs	r3, #8
 8002ca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ca6:	e10a      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002ca8:	2310      	movs	r3, #16
 8002caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002cae:	e106      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a7c      	ldr	r2, [pc, #496]	; (8002ea8 <UART_SetConfig+0x2e8>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d138      	bne.n	8002d2c <UART_SetConfig+0x16c>
 8002cba:	4b7a      	ldr	r3, [pc, #488]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f003 030c 	and.w	r3, r3, #12
 8002cc4:	2b0c      	cmp	r3, #12
 8002cc6:	d82d      	bhi.n	8002d24 <UART_SetConfig+0x164>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <UART_SetConfig+0x110>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002d05 	.word	0x08002d05
 8002cd4:	08002d25 	.word	0x08002d25
 8002cd8:	08002d25 	.word	0x08002d25
 8002cdc:	08002d25 	.word	0x08002d25
 8002ce0:	08002d15 	.word	0x08002d15
 8002ce4:	08002d25 	.word	0x08002d25
 8002ce8:	08002d25 	.word	0x08002d25
 8002cec:	08002d25 	.word	0x08002d25
 8002cf0:	08002d0d 	.word	0x08002d0d
 8002cf4:	08002d25 	.word	0x08002d25
 8002cf8:	08002d25 	.word	0x08002d25
 8002cfc:	08002d25 	.word	0x08002d25
 8002d00:	08002d1d 	.word	0x08002d1d
 8002d04:	2300      	movs	r3, #0
 8002d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d0a:	e0d8      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d12:	e0d4      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d14:	2304      	movs	r3, #4
 8002d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d1a:	e0d0      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d1c:	2308      	movs	r3, #8
 8002d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d22:	e0cc      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d24:	2310      	movs	r3, #16
 8002d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d2a:	e0c8      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a5e      	ldr	r2, [pc, #376]	; (8002eac <UART_SetConfig+0x2ec>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d125      	bne.n	8002d82 <UART_SetConfig+0x1c2>
 8002d36:	4b5b      	ldr	r3, [pc, #364]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002d38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002d40:	2b30      	cmp	r3, #48	; 0x30
 8002d42:	d016      	beq.n	8002d72 <UART_SetConfig+0x1b2>
 8002d44:	2b30      	cmp	r3, #48	; 0x30
 8002d46:	d818      	bhi.n	8002d7a <UART_SetConfig+0x1ba>
 8002d48:	2b20      	cmp	r3, #32
 8002d4a:	d00a      	beq.n	8002d62 <UART_SetConfig+0x1a2>
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d814      	bhi.n	8002d7a <UART_SetConfig+0x1ba>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d002      	beq.n	8002d5a <UART_SetConfig+0x19a>
 8002d54:	2b10      	cmp	r3, #16
 8002d56:	d008      	beq.n	8002d6a <UART_SetConfig+0x1aa>
 8002d58:	e00f      	b.n	8002d7a <UART_SetConfig+0x1ba>
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d60:	e0ad      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d62:	2302      	movs	r3, #2
 8002d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d68:	e0a9      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d70:	e0a5      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d72:	2308      	movs	r3, #8
 8002d74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d78:	e0a1      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d7a:	2310      	movs	r3, #16
 8002d7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002d80:	e09d      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a4a      	ldr	r2, [pc, #296]	; (8002eb0 <UART_SetConfig+0x2f0>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d125      	bne.n	8002dd8 <UART_SetConfig+0x218>
 8002d8c:	4b45      	ldr	r3, [pc, #276]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002d96:	2bc0      	cmp	r3, #192	; 0xc0
 8002d98:	d016      	beq.n	8002dc8 <UART_SetConfig+0x208>
 8002d9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002d9c:	d818      	bhi.n	8002dd0 <UART_SetConfig+0x210>
 8002d9e:	2b80      	cmp	r3, #128	; 0x80
 8002da0:	d00a      	beq.n	8002db8 <UART_SetConfig+0x1f8>
 8002da2:	2b80      	cmp	r3, #128	; 0x80
 8002da4:	d814      	bhi.n	8002dd0 <UART_SetConfig+0x210>
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d002      	beq.n	8002db0 <UART_SetConfig+0x1f0>
 8002daa:	2b40      	cmp	r3, #64	; 0x40
 8002dac:	d008      	beq.n	8002dc0 <UART_SetConfig+0x200>
 8002dae:	e00f      	b.n	8002dd0 <UART_SetConfig+0x210>
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002db6:	e082      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dbe:	e07e      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dc6:	e07a      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dce:	e076      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002dd6:	e072      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a35      	ldr	r2, [pc, #212]	; (8002eb4 <UART_SetConfig+0x2f4>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d12a      	bne.n	8002e38 <UART_SetConfig+0x278>
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df0:	d01a      	beq.n	8002e28 <UART_SetConfig+0x268>
 8002df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df6:	d81b      	bhi.n	8002e30 <UART_SetConfig+0x270>
 8002df8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dfc:	d00c      	beq.n	8002e18 <UART_SetConfig+0x258>
 8002dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e02:	d815      	bhi.n	8002e30 <UART_SetConfig+0x270>
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d003      	beq.n	8002e10 <UART_SetConfig+0x250>
 8002e08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0c:	d008      	beq.n	8002e20 <UART_SetConfig+0x260>
 8002e0e:	e00f      	b.n	8002e30 <UART_SetConfig+0x270>
 8002e10:	2300      	movs	r3, #0
 8002e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e16:	e052      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e1e:	e04e      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e20:	2304      	movs	r3, #4
 8002e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e26:	e04a      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e28:	2308      	movs	r3, #8
 8002e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e2e:	e046      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e30:	2310      	movs	r3, #16
 8002e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e36:	e042      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <UART_SetConfig+0x2dc>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d13a      	bne.n	8002eb8 <UART_SetConfig+0x2f8>
 8002e42:	4b18      	ldr	r3, [pc, #96]	; (8002ea4 <UART_SetConfig+0x2e4>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e50:	d01a      	beq.n	8002e88 <UART_SetConfig+0x2c8>
 8002e52:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002e56:	d81b      	bhi.n	8002e90 <UART_SetConfig+0x2d0>
 8002e58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e5c:	d00c      	beq.n	8002e78 <UART_SetConfig+0x2b8>
 8002e5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e62:	d815      	bhi.n	8002e90 <UART_SetConfig+0x2d0>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <UART_SetConfig+0x2b0>
 8002e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e6c:	d008      	beq.n	8002e80 <UART_SetConfig+0x2c0>
 8002e6e:	e00f      	b.n	8002e90 <UART_SetConfig+0x2d0>
 8002e70:	2300      	movs	r3, #0
 8002e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e76:	e022      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e7e:	e01e      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e86:	e01a      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e8e:	e016      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002e96:	e012      	b.n	8002ebe <UART_SetConfig+0x2fe>
 8002e98:	cfff69f3 	.word	0xcfff69f3
 8002e9c:	40008000 	.word	0x40008000
 8002ea0:	40013800 	.word	0x40013800
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40004400 	.word	0x40004400
 8002eac:	40004800 	.word	0x40004800
 8002eb0:	40004c00 	.word	0x40004c00
 8002eb4:	40005000 	.word	0x40005000
 8002eb8:	2310      	movs	r3, #16
 8002eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4aae      	ldr	r2, [pc, #696]	; (800317c <UART_SetConfig+0x5bc>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	f040 8097 	bne.w	8002ff8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	d823      	bhi.n	8002f1a <UART_SetConfig+0x35a>
 8002ed2:	a201      	add	r2, pc, #4	; (adr r2, 8002ed8 <UART_SetConfig+0x318>)
 8002ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed8:	08002efd 	.word	0x08002efd
 8002edc:	08002f1b 	.word	0x08002f1b
 8002ee0:	08002f05 	.word	0x08002f05
 8002ee4:	08002f1b 	.word	0x08002f1b
 8002ee8:	08002f0b 	.word	0x08002f0b
 8002eec:	08002f1b 	.word	0x08002f1b
 8002ef0:	08002f1b 	.word	0x08002f1b
 8002ef4:	08002f1b 	.word	0x08002f1b
 8002ef8:	08002f13 	.word	0x08002f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002efc:	f7ff fb50 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8002f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f02:	e010      	b.n	8002f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f04:	4b9e      	ldr	r3, [pc, #632]	; (8003180 <UART_SetConfig+0x5c0>)
 8002f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f08:	e00d      	b.n	8002f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f0a:	f7ff fadb 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002f10:	e009      	b.n	8002f26 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002f18:	e005      	b.n	8002f26 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002f24:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	f000 8130 	beq.w	800318e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	4a94      	ldr	r2, [pc, #592]	; (8003184 <UART_SetConfig+0x5c4>)
 8002f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f38:	461a      	mov	r2, r3
 8002f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4413      	add	r3, r2
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d305      	bcc.n	8002f5e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002f58:	69ba      	ldr	r2, [r7, #24]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d903      	bls.n	8002f66 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002f64:	e113      	b.n	800318e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	2200      	movs	r2, #0
 8002f6a:	60bb      	str	r3, [r7, #8]
 8002f6c:	60fa      	str	r2, [r7, #12]
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	4a84      	ldr	r2, [pc, #528]	; (8003184 <UART_SetConfig+0x5c4>)
 8002f74:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	603b      	str	r3, [r7, #0]
 8002f7e:	607a      	str	r2, [r7, #4]
 8002f80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002f84:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f88:	f7fd fc4c 	bl	8000824 <__aeabi_uldivmod>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	4610      	mov	r0, r2
 8002f92:	4619      	mov	r1, r3
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	f04f 0300 	mov.w	r3, #0
 8002f9c:	020b      	lsls	r3, r1, #8
 8002f9e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002fa2:	0202      	lsls	r2, r0, #8
 8002fa4:	6979      	ldr	r1, [r7, #20]
 8002fa6:	6849      	ldr	r1, [r1, #4]
 8002fa8:	0849      	lsrs	r1, r1, #1
 8002faa:	2000      	movs	r0, #0
 8002fac:	460c      	mov	r4, r1
 8002fae:	4605      	mov	r5, r0
 8002fb0:	eb12 0804 	adds.w	r8, r2, r4
 8002fb4:	eb43 0905 	adc.w	r9, r3, r5
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	469a      	mov	sl, r3
 8002fc0:	4693      	mov	fp, r2
 8002fc2:	4652      	mov	r2, sl
 8002fc4:	465b      	mov	r3, fp
 8002fc6:	4640      	mov	r0, r8
 8002fc8:	4649      	mov	r1, r9
 8002fca:	f7fd fc2b 	bl	8000824 <__aeabi_uldivmod>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	4613      	mov	r3, r2
 8002fd4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fd6:	6a3b      	ldr	r3, [r7, #32]
 8002fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fdc:	d308      	bcc.n	8002ff0 <UART_SetConfig+0x430>
 8002fde:	6a3b      	ldr	r3, [r7, #32]
 8002fe0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fe4:	d204      	bcs.n	8002ff0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6a3a      	ldr	r2, [r7, #32]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	e0ce      	b.n	800318e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002ff6:	e0ca      	b.n	800318e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	69db      	ldr	r3, [r3, #28]
 8002ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003000:	d166      	bne.n	80030d0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003002:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003006:	2b08      	cmp	r3, #8
 8003008:	d827      	bhi.n	800305a <UART_SetConfig+0x49a>
 800300a:	a201      	add	r2, pc, #4	; (adr r2, 8003010 <UART_SetConfig+0x450>)
 800300c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003010:	08003035 	.word	0x08003035
 8003014:	0800303d 	.word	0x0800303d
 8003018:	08003045 	.word	0x08003045
 800301c:	0800305b 	.word	0x0800305b
 8003020:	0800304b 	.word	0x0800304b
 8003024:	0800305b 	.word	0x0800305b
 8003028:	0800305b 	.word	0x0800305b
 800302c:	0800305b 	.word	0x0800305b
 8003030:	08003053 	.word	0x08003053
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003034:	f7ff fab4 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8003038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800303a:	e014      	b.n	8003066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800303c:	f7ff fac6 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003042:	e010      	b.n	8003066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003044:	4b4e      	ldr	r3, [pc, #312]	; (8003180 <UART_SetConfig+0x5c0>)
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003048:	e00d      	b.n	8003066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800304a:	f7ff fa3b 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800304e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003050:	e009      	b.n	8003066 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003052:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003058:	e005      	b.n	8003066 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003064:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 8090 	beq.w	800318e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	4a44      	ldr	r2, [pc, #272]	; (8003184 <UART_SetConfig+0x5c4>)
 8003074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003078:	461a      	mov	r2, r3
 800307a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003080:	005a      	lsls	r2, r3, #1
 8003082:	697b      	ldr	r3, [r7, #20]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	441a      	add	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	d916      	bls.n	80030c8 <UART_SetConfig+0x508>
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a0:	d212      	bcs.n	80030c8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a2:	6a3b      	ldr	r3, [r7, #32]
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	f023 030f 	bic.w	r3, r3, #15
 80030aa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	085b      	lsrs	r3, r3, #1
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	f003 0307 	and.w	r3, r3, #7
 80030b6:	b29a      	uxth	r2, r3
 80030b8:	8bfb      	ldrh	r3, [r7, #30]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	8bfa      	ldrh	r2, [r7, #30]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	e062      	b.n	800318e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80030ce:	e05e      	b.n	800318e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d828      	bhi.n	800312a <UART_SetConfig+0x56a>
 80030d8:	a201      	add	r2, pc, #4	; (adr r2, 80030e0 <UART_SetConfig+0x520>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003105 	.word	0x08003105
 80030e4:	0800310d 	.word	0x0800310d
 80030e8:	08003115 	.word	0x08003115
 80030ec:	0800312b 	.word	0x0800312b
 80030f0:	0800311b 	.word	0x0800311b
 80030f4:	0800312b 	.word	0x0800312b
 80030f8:	0800312b 	.word	0x0800312b
 80030fc:	0800312b 	.word	0x0800312b
 8003100:	08003123 	.word	0x08003123
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003104:	f7ff fa4c 	bl	80025a0 <HAL_RCC_GetPCLK1Freq>
 8003108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800310a:	e014      	b.n	8003136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800310c:	f7ff fa5e 	bl	80025cc <HAL_RCC_GetPCLK2Freq>
 8003110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003112:	e010      	b.n	8003136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003114:	4b1a      	ldr	r3, [pc, #104]	; (8003180 <UART_SetConfig+0x5c0>)
 8003116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003118:	e00d      	b.n	8003136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800311a:	f7ff f9d3 	bl	80024c4 <HAL_RCC_GetSysClockFreq>
 800311e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003120:	e009      	b.n	8003136 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003122:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003126:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003128:	e005      	b.n	8003136 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003134:	bf00      	nop
    }

    if (pclk != 0U)
 8003136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003138:	2b00      	cmp	r3, #0
 800313a:	d028      	beq.n	800318e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	4a10      	ldr	r2, [pc, #64]	; (8003184 <UART_SetConfig+0x5c4>)
 8003142:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003146:	461a      	mov	r2, r3
 8003148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800314a:	fbb3 f2f2 	udiv	r2, r3, r2
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085b      	lsrs	r3, r3, #1
 8003154:	441a      	add	r2, r3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	fbb2 f3f3 	udiv	r3, r2, r3
 800315e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003160:	6a3b      	ldr	r3, [r7, #32]
 8003162:	2b0f      	cmp	r3, #15
 8003164:	d910      	bls.n	8003188 <UART_SetConfig+0x5c8>
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800316c:	d20c      	bcs.n	8003188 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800316e:	6a3b      	ldr	r3, [r7, #32]
 8003170:	b29a      	uxth	r2, r3
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60da      	str	r2, [r3, #12]
 8003178:	e009      	b.n	800318e <UART_SetConfig+0x5ce>
 800317a:	bf00      	nop
 800317c:	40008000 	.word	0x40008000
 8003180:	00f42400 	.word	0x00f42400
 8003184:	080037b0 	.word	0x080037b0
      }
      else
      {
        ret = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2201      	movs	r2, #1
 8003192:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2201      	movs	r2, #1
 800319a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	2200      	movs	r2, #0
 80031a2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	2200      	movs	r2, #0
 80031a8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80031aa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3730      	adds	r7, #48	; 0x30
 80031b2:	46bd      	mov	sp, r7
 80031b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080031b8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	f003 0301 	and.w	r3, r3, #1
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f003 0302 	and.w	r3, r3, #2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	f003 0308 	and.w	r3, r3, #8
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00a      	beq.n	8003248 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	430a      	orrs	r2, r1
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	430a      	orrs	r2, r1
 8003268:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800326e:	f003 0320 	and.w	r3, r3, #32
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00a      	beq.n	800328c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	430a      	orrs	r2, r1
 800328a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d01a      	beq.n	80032ce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	430a      	orrs	r2, r1
 80032ac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b6:	d10a      	bne.n	80032ce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00a      	beq.n	80032f0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	430a      	orrs	r2, r1
 80032ee:	605a      	str	r2, [r3, #4]
  }
}
 80032f0:	bf00      	nop
 80032f2:	370c      	adds	r7, #12
 80032f4:	46bd      	mov	sp, r7
 80032f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fa:	4770      	bx	lr

080032fc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b086      	sub	sp, #24
 8003300:	af02      	add	r7, sp, #8
 8003302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800330c:	f7fe f8d6 	bl	80014bc <HAL_GetTick>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0308 	and.w	r3, r3, #8
 800331c:	2b08      	cmp	r3, #8
 800331e:	d10e      	bne.n	800333e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003320:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 f82f 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8003334:	4603      	mov	r3, r0
 8003336:	2b00      	cmp	r3, #0
 8003338:	d001      	beq.n	800333e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e025      	b.n	800338a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b04      	cmp	r3, #4
 800334a:	d10e      	bne.n	800336a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800334c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003350:	9300      	str	r3, [sp, #0]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f819 	bl	8003392 <UART_WaitOnFlagUntilTimeout>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e00f      	b.n	800338a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2220      	movs	r2, #32
 800336e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b09c      	sub	sp, #112	; 0x70
 8003396:	af00      	add	r7, sp, #0
 8003398:	60f8      	str	r0, [r7, #12]
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	603b      	str	r3, [r7, #0]
 800339e:	4613      	mov	r3, r2
 80033a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033a2:	e0a9      	b.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	f000 80a5 	beq.w	80034f8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ae:	f7fe f885 	bl	80014bc <HAL_GetTick>
 80033b2:	4602      	mov	r2, r0
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d302      	bcc.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80033be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d140      	bne.n	8003446 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033cc:	e853 3f00 	ldrex	r3, [r3]
 80033d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033d8:	667b      	str	r3, [r7, #100]	; 0x64
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	461a      	mov	r2, r3
 80033e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033ea:	e841 2300 	strex	r3, r2, [r1]
 80033ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1e6      	bne.n	80033c4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	3308      	adds	r3, #8
 80033fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003408:	f023 0301 	bic.w	r3, r3, #1
 800340c:	663b      	str	r3, [r7, #96]	; 0x60
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3308      	adds	r3, #8
 8003414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003416:	64ba      	str	r2, [r7, #72]	; 0x48
 8003418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800341c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800341e:	e841 2300 	strex	r3, r2, [r1]
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1e5      	bne.n	80033f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e069      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0304 	and.w	r3, r3, #4
 8003450:	2b00      	cmp	r3, #0
 8003452:	d051      	beq.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	69db      	ldr	r3, [r3, #28]
 800345a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800345e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003462:	d149      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800346c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	e853 3f00 	ldrex	r3, [r3]
 800347a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800347c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800347e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003482:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800348c:	637b      	str	r3, [r7, #52]	; 0x34
 800348e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003494:	e841 2300 	strex	r3, r2, [r1]
 8003498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800349a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349c:	2b00      	cmp	r3, #0
 800349e:	d1e6      	bne.n	800346e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	613b      	str	r3, [r7, #16]
   return(result);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f023 0301 	bic.w	r3, r3, #1
 80034b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3308      	adds	r3, #8
 80034be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034c0:	623a      	str	r2, [r7, #32]
 80034c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69f9      	ldr	r1, [r7, #28]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e5      	bne.n	80034a0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2220      	movs	r2, #32
 80034d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2220      	movs	r2, #32
 80034e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2220      	movs	r2, #32
 80034e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e010      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	4013      	ands	r3, r2
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	429a      	cmp	r2, r3
 8003506:	bf0c      	ite	eq
 8003508:	2301      	moveq	r3, #1
 800350a:	2300      	movne	r3, #0
 800350c:	b2db      	uxtb	r3, r3
 800350e:	461a      	mov	r2, r3
 8003510:	79fb      	ldrb	r3, [r7, #7]
 8003512:	429a      	cmp	r2, r3
 8003514:	f43f af46 	beq.w	80033a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3770      	adds	r7, #112	; 0x70
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_UARTEx_DisableFifoMode+0x16>
 8003534:	2302      	movs	r3, #2
 8003536:	e027      	b.n	8003588 <HAL_UARTEx_DisableFifoMode+0x66>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2224      	movs	r2, #36	; 0x24
 8003544:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f022 0201 	bic.w	r2, r2, #1
 800355e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003566:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2220      	movs	r2, #32
 800357a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003586:	2300      	movs	r3, #0
}
 8003588:	4618      	mov	r0, r3
 800358a:	3714      	adds	r7, #20
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b084      	sub	sp, #16
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80035a8:	2302      	movs	r3, #2
 80035aa:	e02d      	b.n	8003608 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2201      	movs	r2, #1
 80035b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2224      	movs	r2, #36	; 0x24
 80035b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f022 0201 	bic.w	r2, r2, #1
 80035d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	683a      	ldr	r2, [r7, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f000 f84f 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2220      	movs	r2, #32
 80035fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003624:	2302      	movs	r3, #2
 8003626:	e02d      	b.n	8003684 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2224      	movs	r2, #36	; 0x24
 8003634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0201 	bic.w	r2, r2, #1
 800364e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	683a      	ldr	r2, [r7, #0]
 8003660:	430a      	orrs	r2, r1
 8003662:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f811 	bl	800368c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	68fa      	ldr	r2, [r7, #12]
 8003670:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2220      	movs	r2, #32
 8003676:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800368c:	b480      	push	{r7}
 800368e:	b085      	sub	sp, #20
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003698:	2b00      	cmp	r3, #0
 800369a:	d108      	bne.n	80036ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80036ac:	e031      	b.n	8003712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80036ae:	2308      	movs	r3, #8
 80036b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80036b2:	2308      	movs	r3, #8
 80036b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	0e5b      	lsrs	r3, r3, #25
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	0f5b      	lsrs	r3, r3, #29
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	f003 0307 	and.w	r3, r3, #7
 80036d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036d6:	7bbb      	ldrb	r3, [r7, #14]
 80036d8:	7b3a      	ldrb	r2, [r7, #12]
 80036da:	4911      	ldr	r1, [pc, #68]	; (8003720 <UARTEx_SetNbDataToProcess+0x94>)
 80036dc:	5c8a      	ldrb	r2, [r1, r2]
 80036de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80036e2:	7b3a      	ldrb	r2, [r7, #12]
 80036e4:	490f      	ldr	r1, [pc, #60]	; (8003724 <UARTEx_SetNbDataToProcess+0x98>)
 80036e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80036e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80036ec:	b29a      	uxth	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
 80036f6:	7b7a      	ldrb	r2, [r7, #13]
 80036f8:	4909      	ldr	r1, [pc, #36]	; (8003720 <UARTEx_SetNbDataToProcess+0x94>)
 80036fa:	5c8a      	ldrb	r2, [r1, r2]
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003700:	7b7a      	ldrb	r2, [r7, #13]
 8003702:	4908      	ldr	r1, [pc, #32]	; (8003724 <UARTEx_SetNbDataToProcess+0x98>)
 8003704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003706:	fb93 f3f2 	sdiv	r3, r3, r2
 800370a:	b29a      	uxth	r2, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003712:	bf00      	nop
 8003714:	3714      	adds	r7, #20
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	080037c8 	.word	0x080037c8
 8003724:	080037d0 	.word	0x080037d0

08003728 <__libc_init_array>:
 8003728:	b570      	push	{r4, r5, r6, lr}
 800372a:	4d0d      	ldr	r5, [pc, #52]	; (8003760 <__libc_init_array+0x38>)
 800372c:	4c0d      	ldr	r4, [pc, #52]	; (8003764 <__libc_init_array+0x3c>)
 800372e:	1b64      	subs	r4, r4, r5
 8003730:	10a4      	asrs	r4, r4, #2
 8003732:	2600      	movs	r6, #0
 8003734:	42a6      	cmp	r6, r4
 8003736:	d109      	bne.n	800374c <__libc_init_array+0x24>
 8003738:	4d0b      	ldr	r5, [pc, #44]	; (8003768 <__libc_init_array+0x40>)
 800373a:	4c0c      	ldr	r4, [pc, #48]	; (800376c <__libc_init_array+0x44>)
 800373c:	f000 f820 	bl	8003780 <_init>
 8003740:	1b64      	subs	r4, r4, r5
 8003742:	10a4      	asrs	r4, r4, #2
 8003744:	2600      	movs	r6, #0
 8003746:	42a6      	cmp	r6, r4
 8003748:	d105      	bne.n	8003756 <__libc_init_array+0x2e>
 800374a:	bd70      	pop	{r4, r5, r6, pc}
 800374c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003750:	4798      	blx	r3
 8003752:	3601      	adds	r6, #1
 8003754:	e7ee      	b.n	8003734 <__libc_init_array+0xc>
 8003756:	f855 3b04 	ldr.w	r3, [r5], #4
 800375a:	4798      	blx	r3
 800375c:	3601      	adds	r6, #1
 800375e:	e7f2      	b.n	8003746 <__libc_init_array+0x1e>
 8003760:	080037e0 	.word	0x080037e0
 8003764:	080037e0 	.word	0x080037e0
 8003768:	080037e0 	.word	0x080037e0
 800376c:	080037e4 	.word	0x080037e4

08003770 <memset>:
 8003770:	4402      	add	r2, r0
 8003772:	4603      	mov	r3, r0
 8003774:	4293      	cmp	r3, r2
 8003776:	d100      	bne.n	800377a <memset+0xa>
 8003778:	4770      	bx	lr
 800377a:	f803 1b01 	strb.w	r1, [r3], #1
 800377e:	e7f9      	b.n	8003774 <memset+0x4>

08003780 <_init>:
 8003780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003782:	bf00      	nop
 8003784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003786:	bc08      	pop	{r3}
 8003788:	469e      	mov	lr, r3
 800378a:	4770      	bx	lr

0800378c <_fini>:
 800378c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800378e:	bf00      	nop
 8003790:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003792:	bc08      	pop	{r3}
 8003794:	469e      	mov	lr, r3
 8003796:	4770      	bx	lr
